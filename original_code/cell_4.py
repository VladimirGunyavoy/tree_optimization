# %%
import sys
import os
import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
from IPython.display import display, HTML

from matplotlib.patches import FancyArrowPatch
from scipy.optimize import minimize

# %%
current_dir = os.getcwd()
# –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ spores/v14_back/src
project_root = os.path.abspath(os.path.join(current_dir, '..', '..', '..', 'src'))
if project_root not in sys.path:
    sys.path.append(project_root)

from logic.pendulum import PendulumSystem
from logic.control_tree import ControlTreeBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è Jupyter
# %matplotlib inline
plt.rcParams['figure.figsize'] = (14, 7)
plt.rcParams['figure.dpi'] = 100

print("‚úÖ –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# %% [markdown]
# 

# %%
def sort_grandchildren_simple(grandchildren, root_position, show: bool = False):
    """
    –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–Ω—É–∫–æ–≤: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ + roll –ø–æ —É—Å–ª–æ–≤–∏—é.
    
    Args:
        grandchildren: —Å–ø–∏—Å–æ–∫ –≤–Ω—É–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏–π –∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        root_position: –ø–æ–∑–∏—Ü–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π —Å–ø–æ—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–≥–ª–æ–≤
    
    Returns:
        –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–Ω—É–∫–æ–≤
    """
    
    def get_angle_from_root(gc):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≥–æ–ª –æ—Ç –∫–æ—Ä–Ω—è –¥–æ –≤–Ω—É–∫–∞."""
        dx = gc['position'][0] - root_position[0]
        dy = gc['position'][1] - root_position[1] 
        return np.arctan2(dy, dx)
    
    # 1. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≥–ª—É (–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏)
    sorted_gc = sorted(grandchildren, key=get_angle_from_root, reverse=True)
    
    if show:
        print("üîç –£–≥–ª—ã –≤–Ω—É–∫–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:")
    for i, gc in enumerate(sorted_gc):
        angle_deg = get_angle_from_root(gc) * 180 / np.pi
        if show:    
            print(f"  {i}: {gc['name']} (—Ä–æ–¥–∏—Ç–µ–ª—å {gc['parent_idx']}) –ø–æ–¥ —É–≥–ª–æ–º {angle_deg:.1f}¬∞")
    
    # 2. –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –≤–Ω—É–∫–∞ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è 0
    roll_offset = 0
    for i, gc in enumerate(sorted_gc):
        if gc['parent_idx'] == 0:
            roll_offset = i
            if show:
                print(f"üéØ –ù–∞–π–¥–µ–Ω –≤–Ω—É–∫ —Ä–æ–¥–∏—Ç–µ–ª—è 0 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}, roll_offset = {roll_offset}")
            break
    
    # 3. –î–µ–ª–∞–µ–º roll —á—Ç–æ–±—ã –≤–Ω—É–∫ —Ä–æ–¥–∏—Ç–µ–ª—è 0 —Å—Ç–∞–ª –ø–µ—Ä–≤—ã–º
    sorted_gc = np.roll(sorted_gc, -roll_offset).tolist()
    if show:
        print(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω roll –Ω–∞ {-roll_offset}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π: 1-–π –≤–Ω—É–∫ –æ—Ç –¥—Ä—É–≥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è?
    if len(sorted_gc) >= 2 and sorted_gc[1]['parent_idx'] == 0:
        # –ï—Å–ª–∏ 1-–π —Ç–æ–∂–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è 0, —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ 1
        sorted_gc = np.roll(sorted_gc, 1).tolist()
        if show:
            print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π roll +1")
    
    if show:
        print(f"\n‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –æ–±—Ö–æ–¥:")
        print(f"   0-–π –≤–Ω—É–∫ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è {sorted_gc[0]['parent_idx']} ({sorted_gc[0]['name']})")
        print(f"   1-–π –≤–Ω—É–∫ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è {sorted_gc[1]['parent_idx']} ({sorted_gc[1]['name']})")
    
    return sorted_gc

# %%
def build_simple_tree(initial_position, dt_value, pendulum, dt_children=None, dt_grandchildren=None, show: bool = False):
    """
    –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ—Å—Ç–æ–µ –¥–µ—Ä–µ–≤–æ —Å–ø–æ—Ä –≥–ª—É–±–∏–Ω–æ–π 2 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö dt.
    
    Args:
        initial_position: np.array([theta, theta_dot]) - –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        dt_value: float - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ dt_children=None)
        pendulum: –æ–±—ä–µ–∫—Ç –º–∞—è—Ç–Ω–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        dt_children: —Å–ø–∏—Å–æ–∫ –∏–∑ 4 –∑–Ω–∞—á–µ–Ω–∏–π dt –¥–ª—è –¥–µ—Ç–µ–π [forward_max, backward_max, forward_min, backward_min]
                    –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è dt_value –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–µ–π
        dt_grandchildren: —Å–ø–∏—Å–æ–∫ –∏–∑ 8 –∑–Ω–∞—á–µ–Ω–∏–π dt –¥–ª—è –≤–Ω—É–∫–æ–≤ [gc_0_0, gc_0_1, gc_1_0, gc_1_1, ...]
                         –ï—Å–ª–∏ None, –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ dt_parent / k –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–Ω—É–∫–∞
        show: bool - –≤—ã–≤–æ–¥–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    
    Returns:
        dict —Å –∫–æ—Ä–Ω–µ–≤–æ–π —Å–ø–æ—Ä–æ–π, –¥–µ—Ç—å–º–∏ –∏ –≤–Ω—É–∫–∞–º–∏
    """
    if show:
        print(f"üå± –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ {initial_position}")
        if dt_children is not None:
            print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ dt –¥–µ—Ç–µ–π: {dt_children}")
        else:
            print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π dt={dt_value} –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–µ–π")
        
        if dt_grandchildren is not None:
            print(f"üë∂ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ dt –≤–Ω—É–∫–æ–≤: {dt_grandchildren}")
        else:
            print(f"üë∂ dt –≤–Ω—É–∫–æ–≤ –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (dt_parent / k)")
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    u_min, u_max = pendulum.get_control_bounds()
    
    # –ö–æ—Ä–Ω–µ–≤–∞—è —Å–ø–æ—Ä–∞
    root = {
        'position': initial_position.copy(),
        'id': 'root',
        'color': 'red',
        'size': 100
    }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ dt –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
    if dt_children is None:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º - –≤—Å–µ –¥–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω dt
        dt_list = [dt_value, dt_value, dt_value, dt_value]
    else:
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ dt –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
        assert len(dt_children) == 4, "dt_children –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 4 —ç–ª–µ–º–µ–Ω—Ç–∞"
        dt_list = dt_children.copy()
    
    # 4 –ø–æ—Ç–æ–º–∫–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ dt
    children = []
    configs = [
        {'control': u_max, 'dt_sign': 1, 'name': 'forward_max', 'color': 'blue', 'dt_idx': 0},
        {'control': u_max, 'dt_sign': -1, 'name': 'backward_max', 'color': 'cyan', 'dt_idx': 1}, 
        {'control': u_min, 'dt_sign': 1, 'name': 'forward_min', 'color': 'green', 'dt_idx': 2},
        {'control': u_min, 'dt_sign': -1, 'name': 'backward_min', 'color': 'orange', 'dt_idx': 3}
    ]
    
    for i, config in enumerate(configs):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π dt –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
        child_dt = dt_list[config['dt_idx']] * config['dt_sign']
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        new_pos = pendulum.scipy_rk45_step(initial_position, config['control'], child_dt)
            
        child = {
            'position': new_pos,
            'id': f"child_{i}",
            'name': config['name'],
            'color': config['color'],
            'size': 60,
            'control': config['control'],
            'dt': child_dt,
            'dt_abs': abs(child_dt),  # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dt –¥–ª—è –≤–Ω—É–∫–æ–≤
            'dt_idx': config['dt_idx']  # –ò–Ω–¥–µ–∫—Å –≤ dt_list
        }
        children.append(child)
        
        if show:
            print(f"  üçÑ {config['name']}: u={config['control']:+.1f}, dt={child_dt:+.3f} ‚Üí {new_pos}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–π –ø–æ —É–≥–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è
    def get_angle(child):
        dx = child['position'][0] - root['position'][0] 
        dy = child['position'][1] - root['position'][1]
        return np.arctan2(dy, dx)
    
    children_sorted = sorted(children, key=get_angle)
    
    # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º ID –ø–æ –ø–æ—Ä—è–¥–∫—É
    for i, child in enumerate(children_sorted):
        child['id'] = f"child_{i}"
    
    if show:
        print("\nüîÑ –ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–≥–ª—É:")
        for i, child in enumerate(children_sorted):
            angle = get_angle(child) * 180 / np.pi
            print(f"  {i}: {child['name']} –ø–æ–¥ —É–≥–ª–æ–º {angle:.1f}¬∞, dt={child['dt']:+.3f}")

    # –°—Ç—Ä–æ–∏–º –≤–Ω—É–∫–æ–≤ (—É—Ä–æ–≤–µ–Ω—å 2)
    grandchildren = []
    if show:
        print("\nüå≥ –°—Ç—Ä–æ–∏–º —É—Ä–æ–≤–µ–Ω—å 2 (–æ–±—Ä–∞—â–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ):")

    k = 2  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è dt –¥–ª—è –≤–Ω—É–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ dt_grandchildren=None)

    for parent_idx, parent in enumerate(children_sorted):
        # –û–±—Ä–∞—â–∞–µ–º –∑–Ω–∞–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
        reversed_control = -parent['control']
        
        if show:
            print(f"\n  üë∂ –û—Ç —Å–ø–æ—Ä—ã {parent_idx} (u={parent['control']:+.1f}, dt={parent['dt']:+.3f}):")
            print(f"      –°—Ç—Ä–æ–∏–º –¥–µ—Ç–µ–π —Å u={reversed_control:+.1f}")
        
        # 2 –ø–æ—Ç–æ–º–∫–∞ —Å –æ–±—Ä–∞—â–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º: +dt –∏ -dt
        grandchild_configs = [
            {'dt_sign': 1, 'name': f'gc_{parent_idx}_forward', 'color': 'lightblue'},
            {'dt_sign': -1, 'name': f'gc_{parent_idx}_backward', 'color': 'lightcoral'}
        ]
        
        for gc_idx, gc_config in enumerate(grandchild_configs):
            # –í—ã—á–∏—Å–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–Ω—É–∫–∞ –¥–ª—è dt_grandchildren
            gc_global_idx = parent_idx * 2 + gc_idx
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º dt –¥–ª—è —ç—Ç–æ–≥–æ –≤–Ω—É–∫–∞
            if dt_grandchildren is not None:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π dt –∏–∑ –º–∞—Å—Å–∏–≤–∞
                assert len(dt_grandchildren) == 8, "dt_grandchildren –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                gc_dt_abs = dt_grandchildren[gc_global_idx]
            else:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ: dt —Ä–æ–¥–∏—Ç–µ–ª—è / k
                gc_dt_abs = parent['dt_abs'] / k
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            final_dt = gc_dt_abs * gc_config['dt_sign']
            
            new_pos = pendulum.scipy_rk45_step(parent['position'], reversed_control, final_dt)
            
            grandchild = {
                'position': new_pos,
                'parent_id': parent['id'],
                'parent_idx': parent_idx,
                'local_idx': gc_idx,
                'global_idx': gc_global_idx,  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                'id': f"gc_{parent_idx}_{gc_idx}",
                'name': gc_config['name'],
                'color': gc_config['color'],
                'size': 40,
                'control': reversed_control,
                'dt': final_dt,
                'dt_abs': gc_dt_abs,
                'parent_dt': parent['dt']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º dt —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            }
            grandchildren.append(grandchild)
            
            if show:
                direction = "–≤–ø–µ—Ä–µ–¥" if gc_config['dt_sign'] > 0 else "–Ω–∞–∑–∞–¥"
                dt_source = f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π[{gc_global_idx}]" if dt_grandchildren is not None else f"–∞–≤—Ç–æ (—Ä–æ–¥–∏—Ç–µ–ª—å/k)"
                print(f"    üå± {gc_idx}: u={reversed_control:+.1f}, dt={final_dt:+.4f} ({direction}, {dt_source}) ‚Üí {new_pos}")

    grandchildren_sorted = sort_grandchildren_simple(grandchildren, root['position'])
    
    # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    for i, gc in enumerate(grandchildren_sorted):
        gc['global_idx'] = i
    
    if show:
        print("\nüîÑ –ò—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤–Ω—É–∫–æ–≤:")
        for i, gc in enumerate(grandchildren_sorted):
            print(f"  {i}: —Ä–æ–¥–∏—Ç–µ–ª—å {gc['parent_idx']}, u={gc['control']:+.1f}, dt={gc['dt']:+.4f}")
        
    return {
        'root': root,
        'children': children_sorted,
        'grandchildren': grandchildren_sorted,
        'dt_info': {
            'dt_children': dt_list,
            'dt_grandchildren': dt_grandchildren if dt_grandchildren is not None else 'auto',
            'dt_standard': dt_value,
            'k_factor': k
        }
    }

# %%
def visualize_tree(tree_data):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ —Å–ø–æ—Ä —Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º–∏ –∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ dt –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞.
    
    Args:
        tree_data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–µ—Ä–µ–≤–∞ –æ—Ç build_simple_tree
    """
    fig, ax = plt.subplots(1, 1, figsize=(14, 8))
    
    root = tree_data['root']
    children = tree_data['children']
    dt_info = tree_data.get('dt_info', {})
    
    # –†–∏—Å—É–µ–º –∫–æ—Ä–Ω–µ–≤—É—é —Å–ø–æ—Ä—É
    ax.scatter(root['position'][0], root['position'][1], 
              c=root['color'], s=root['size'], alpha=0.8, 
              label='Root', edgecolors='black', linewidth=2)
    
    # –†–∏—Å—É–µ–º –¥–µ—Ç–µ–π –∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –æ—Ç –∫–æ—Ä–Ω—è –∫ –¥–µ—Ç—è–º
    for i, child in enumerate(children):
        # –ù–æ–º–µ—Ä —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π
        percent = 0.0001 * 0
        ax.text(child['position'][0] * (1 + percent), child['position'][1] * (1 + percent), 
            str(i), fontsize=12, fontweight='bold', 
            color='black', ha='left', va='bottom',
            bbox=dict(boxstyle="circle,pad=0.1", facecolor='white', alpha=0.8))
        
        # –¢–æ—á–∫–∞-–ø–æ—Ç–æ–º–æ–∫
        ax.scatter(child['position'][0], child['position'][1],
                  c=child['color'], s=child['size'], alpha=0.7,
                  label=child['name'], edgecolors='black')
        
        # –°—Ç—Ä–µ–ª–æ—á–∫–∞ –æ—Ç –∫–æ—Ä–Ω—è –∫ –ø–æ—Ç–æ–º–∫—É
        arrow = FancyArrowPatch(
            (root['position'][0], root['position'][1]),
            (child['position'][0], child['position'][1]),
            arrowstyle='->', 
            mutation_scale=15,
            color=child['color'],
            alpha=0.6,
            linewidth=2
        )
        ax.add_patch(arrow)
        
        # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π dt)
        mid_x = (root['position'][0] + child['position'][0]) / 2
        mid_y = (root['position'][1] + child['position'][1]) / 2
        
        label_text = f"u={child['control']:+.1f}\ndt={child['dt']:+.3f}"
        ax.annotate(label_text, (mid_x, mid_y), 
                   fontsize=8, ha='center', va='center',
                   bbox=dict(boxstyle="round,pad=0.2", facecolor='white', alpha=0.7))
    
    # –†–∏—Å—É–µ–º –≤–Ω—É–∫–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'grandchildren' in tree_data:
        for grandchild in tree_data['grandchildren']:
            # –¢–æ—á–∫–∞-–≤–Ω—É–∫
            ax.scatter(grandchild['position'][0], grandchild['position'][1],
                    c=grandchild['color'], s=grandchild['size'], alpha=0.6,
                    edgecolors='gray', linewidth=1)
            
            # –°—Ç—Ä–µ–ª–æ—á–∫–∞ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –∫ –≤–Ω—É–∫—É
            parent = children[grandchild['parent_idx']]
            arrow = FancyArrowPatch(
                (parent['position'][0], parent['position'][1]),
                (grandchild['position'][0], grandchild['position'][1]),
                arrowstyle='->', 
                mutation_scale=10,
                color=grandchild['color'],
                alpha=0.5,
                linewidth=1.5
            )
            ax.add_patch(arrow)
            
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–Ω—É–∫–∞
            label = str(grandchild.get('global_idx', '?'))
            ax.text(grandchild['position'][0], grandchild['position'][1], 
                   label, fontsize=10, fontweight='bold', 
                   color='white', ha='center', va='center',
                   bbox=dict(boxstyle="circle,pad=0.15", facecolor='purple', alpha=0.8))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    ax.set_xlabel('Œ∏ (—Ä–∞–¥–∏–∞–Ω—ã)', fontsize=12)
    ax.set_ylabel('Œ∏Ãá (—Ä–∞–¥/—Å)', fontsize=12)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ dt
    title = "–î–µ—Ä–µ–≤–æ —Å–ø–æ—Ä –≥–ª—É–±–∏–Ω–æ–π 2"
    if dt_info:
        if 'dt_children' in dt_info and dt_info['dt_children'] is not None:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ dt –¥–µ—Ç–µ–π
            dt_children = dt_info['dt_children']
            title += f"\n–î–µ—Ç–∏ dt: [{dt_children[0]:.3f}, {dt_children[1]:.3f}, {dt_children[2]:.3f}, {dt_children[3]:.3f}]"
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π dt
            title += f"\n–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π dt = {dt_info.get('dt_standard', 'N/A')}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ dt –≤–Ω—É–∫–æ–≤
        if 'dt_grandchildren' in dt_info:
            dt_gc = dt_info['dt_grandchildren']
            if isinstance(dt_gc, str) and dt_gc == 'auto':
                title += f"\n–í–Ω—É–∫–∏ dt: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ (k={dt_info.get('k_factor', 2)})"
            elif dt_gc is not None:
                title += f"\n–í–Ω—É–∫–∏ dt: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ ({len(dt_gc)} –∑–Ω–∞—á–µ–Ω–∏–π)"
            else:
                title += f"\n–í–Ω—É–∫–∏ dt: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ (k={dt_info.get('k_factor', 2)})"
    
    ax.set_title(title, fontsize=12)
    ax.grid(True, alpha=0.3)
    ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    
    plt.tight_layout()
    plt.show()
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"\nüìä –°–í–û–î–ö–ê –î–ï–†–ï–í–ê:")
    print(f"   üå≥ –ö–æ—Ä–µ–Ω—å: {root['position']}")
    print(f"   üçÑ –î–µ—Ç–µ–π: {len(children)} —Å–ø–æ—Ä")
    if 'grandchildren' in tree_data:
        print(f"   üë∂ –í–Ω—É–∫–æ–≤: {len(tree_data['grandchildren'])} —Å–ø–æ—Ä")
    if dt_info:
        print(f"   ‚è±Ô∏è  dt –¥–µ—Ç–µ–π: {dt_info.get('dt_children', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')}")
        dt_gc = dt_info.get('dt_grandchildren', 'auto')
        if isinstance(dt_gc, str) and dt_gc == 'auto':
            print(f"   üë∂ dt –≤–Ω—É–∫–æ–≤: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ (k={dt_info.get('k_factor', 2)})")
        elif dt_gc is not None:
            print(f"   üë∂ dt –≤–Ω—É–∫–æ–≤: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ {[f'{dt:.3f}' for dt in dt_gc]}")
        else:
            print(f"   üë∂ dt –≤–Ω—É–∫–æ–≤: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ (k={dt_info.get('k_factor', 2)})")

# %%

dt = 0.01  # –í—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥ - –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å!

# –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–∞—è—Ç–Ω–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞)
pendulum = PendulumSystem(
    g=9.81,
    l=2.0, 
    m=1.0,
    damping=0.1,
    max_control=2.0
)

initial_pos = np.array([np.pi, 0.0])

# –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
tree = build_simple_tree(initial_pos, dt, pendulum, 
                         dt_children=np.ones(4)*dt,
                         dt_grandchildren=np.ones(8)*dt/10
)

# –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º  
visualize_tree(tree)

# print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
# print(f"–ö–æ—Ä–Ω–µ–≤–∞—è —Å–ø–æ—Ä–∞: {tree['root']['position']}")
# print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–º–∫–æ–≤: {len(tree['children'])}")
# for child in tree['children']:
#     distance = np.linalg.norm(child['position'] - tree['root']['position'])
#     print(f"  {child['name']}: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–æ—Ä–Ω—è = {distance:.3f}")

# %%
def calc_pair_distances(grandchildren, show=True):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –≤–Ω—É–∫–æ–≤.
    –ü–∞—Ä—ã: (0,1), (2,3), (4,5), (6,7) –ø–æ –ø—Ä—è–º–æ–º—É –∏–Ω–¥–µ–∫—Å—É –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ.
    
    Args:
        grandchildren: —Å–ø–∏—Å–æ–∫ –≤–Ω—É–∫–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ—Ä—è–¥–æ–∫ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        show: –≤—ã–≤–æ–¥–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
    Returns:
        np.array –∏–∑ 4 —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
    """
    distances = np.zeros(4)
    
    for pair_idx in range(4):
        # –ü—Ä—è–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø–∞—Ä—ã: (0,1), (2,3), (4,5), (6,7)
        idx1 = pair_idx * 2
        idx2 = pair_idx * 2 + 1
        
        if idx1 < len(grandchildren) and idx2 < len(grandchildren):
            # –ë–µ—Ä–µ–º –≤–Ω—É–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –ø–æ –∏–Ω–¥–µ–∫—Å—É
            gc1 = grandchildren[idx1]
            gc2 = grandchildren[idx2]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏
            pos1 = gc1['position']
            pos2 = gc2['position']
            distance = np.linalg.norm(pos1 - pos2)
            distances[pair_idx] = distance
        else:
            if show:
                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–Ω—É–∫–æ–≤ –¥–ª—è –ø–∞—Ä—ã {pair_idx}: –Ω—É–∂–Ω—ã –∏–Ω–¥–µ–∫—Å—ã {idx1}, {idx2}")
            distances[pair_idx] = float('inf')
    
    return distances

# %%
def calculate_mean_points(grandchildren, show=True):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –≤–Ω—É–∫–æ–≤.
    –ü–∞—Ä—ã: (0,1), (2,3), (4,5), (6,7) –ø–æ –ø—Ä—è–º–æ–º—É –∏–Ω–¥–µ–∫—Å—É –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ.
    
    Args:
        grandchildren: —Å–ø–∏—Å–æ–∫ –≤–Ω—É–∫–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ—Ä—è–¥–æ–∫ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        show: –≤—ã–≤–æ–¥–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
    Returns:
        np.array —Ä–∞–∑–º–µ—Ä–∞ (4, 2) —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ —Ç–æ—á–∫–∞–º–∏ 4 –ø–∞—Ä
    """
    means = np.zeros((4, 2))
    
    for pair_idx in range(4):
        # –ü—Ä—è–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø–∞—Ä—ã: (0,1), (2,3), (4,5), (6,7)
        idx1 = pair_idx * 2
        idx2 = pair_idx * 2 + 1
        
        if idx1 < len(grandchildren) and idx2 < len(grandchildren):
            # –ë–µ—Ä–µ–º –≤–Ω—É–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –ø–æ –∏–Ω–¥–µ–∫—Å—É
            gc1 = grandchildren[idx1]
            gc2 = grandchildren[idx2]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–æ—á–∫—É
            pos1 = gc1['position']
            pos2 = gc2['position']
            means[pair_idx] = (pos1 + pos2) / 2
        else:
            if show:
                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–Ω—É–∫–æ–≤ –¥–ª—è –ø–∞—Ä—ã {pair_idx}: –Ω—É–∂–Ω—ã –∏–Ω–¥–µ–∫—Å—ã {idx1}, {idx2}")
            means[pair_idx] = np.array([0, 0])
    
    return means

# %%
def calculate_area(mean_points):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–æ 4 —Ç–æ—á–∫–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É –®–Ω—É—Ä–∞.
    
    Args:
        mean_points: np.array —Ä–∞–∑–º–µ—Ä–∞ (4, 2) —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ 4 –≤–µ—Ä—à–∏–Ω
        
    Returns:
        float: –ø–ª–æ—â–∞–¥—å —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∞
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    x = [p[0] for p in mean_points]
    y = [p[1] for p in mean_points]
    
    # –§–æ—Ä–º—É–ª–∞ –®–Ω—É—Ä–∞ (shoelace formula)
    # –ü–ª–æ—â–∞–¥—å = 0.5 * |Œ£(x_i * y_{i+1} - y_i * x_{i+1})|
    area = 0.5 * np.abs(np.dot(x, np.roll(y, 1)) - np.dot(y, np.roll(x, 1)))
    
    return area

# %%
def objective_function(dt_all, initial_position, dt_value, pendulum, show=False):
    """
    –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ - –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–ª–æ—â–∞–¥—å —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∞.
    
    Args:
        dt_all: np.array –∏–∑ 12 –∑–Ω–∞—á–µ–Ω–∏–π dt [4 –¥–ª—è –¥–µ—Ç–µ–π + 8 –¥–ª—è –≤–Ω—É–∫–æ–≤]
        initial_position: –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        dt_value: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π dt (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        pendulum: –æ–±—ä–µ–∫—Ç –º–∞—è—Ç–Ω–∏–∫–∞
        show: –≤—ã–≤–æ–¥–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
    Returns:
        float: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ = –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø–ª–æ—â–∞–¥–∏)
    """
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º dt –Ω–∞ –¥–µ—Ç–µ–π –∏ –≤–Ω—É–∫–æ–≤
        dt_children = dt_all[0:4]      # –ü–µ—Ä–≤—ã–µ 4 —ç–ª–µ–º–µ–Ω—Ç–∞
        dt_grandchildren = dt_all[4:12]  # –û—Å—Ç–∞–ª—å–Ω—ã–µ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ —Å —Ç–µ–∫—É—â–∏–º–∏ dt
        tree = build_simple_tree(
            initial_position=initial_position,
            dt_value=dt_value, 
            pendulum=pendulum,
            dt_children=dt_children,
            dt_grandchildren=dt_grandchildren,
            show=False
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É–∫–æ–≤
        grandchildren = tree['grandchildren']
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –ø–∞—Ä
        mean_points = calculate_mean_points(grandchildren, show=show)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∞
        area = calculate_area(mean_points)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å (scipy.optimize –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç)
        return -area
        
    except Exception as e:
        if show:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ objective_function: {e}")
        return 1e6  # –ë–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# %%
def constraint_function(dt_all, initial_position, dt_value, pendulum, 
                       pair_idx, epsilon, show=False):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–∞—Ä—ã –≤–Ω—É–∫–æ–≤.
    
    Args:
        dt_all: np.array –∏–∑ 12 –∑–Ω–∞—á–µ–Ω–∏–π dt [4 –¥–ª—è –¥–µ—Ç–µ–π + 8 –¥–ª—è –≤–Ω—É–∫–æ–≤]
        initial_position: –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        dt_value: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π dt (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        pendulum: –æ–±—ä–µ–∫—Ç –º–∞—è—Ç–Ω–∏–∫–∞
        pair_idx: –∏–Ω–¥–µ–∫—Å –ø–∞—Ä—ã (0, 1, 2, 3)
        epsilon: –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–Ω—É–∫–∞–º–∏ –≤ –ø–∞—Ä–µ
        show: –≤—ã–≤–æ–¥–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
    Returns:
        float: epsilon - distance (> 0 –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    """
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º dt –Ω–∞ –¥–µ—Ç–µ–π –∏ –≤–Ω—É–∫–æ–≤
        dt_children = dt_all[0:4]      # –ü–µ—Ä–≤—ã–µ 4 —ç–ª–µ–º–µ–Ω—Ç–∞
        dt_grandchildren = dt_all[4:12]  # –û—Å—Ç–∞–ª—å–Ω—ã–µ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ —Å —Ç–µ–∫—É—â–∏–º–∏ dt
        tree = build_simple_tree(
            initial_position=initial_position,
            dt_value=dt_value, 
            pendulum=pendulum,
            dt_children=dt_children,
            dt_grandchildren=dt_grandchildren,
            show=False
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É–∫–æ–≤
        grandchildren = tree['grandchildren']
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
        distances = calc_pair_distances(grandchildren, show=show)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
        constraint_value = epsilon - distances[pair_idx]
        
        return constraint_value
        
    except Exception as e:
        if show:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ constraint_function –¥–ª—è –ø–∞—Ä—ã {pair_idx}: {e}")
        return -1e6  # –ë–æ–ª—å—à–æ–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ


def create_constraints(initial_position, dt_value, pendulum, epsilon=1e-3, show=True):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö 4 –ø–∞—Ä –≤–Ω—É–∫–æ–≤.
    
    Args:
        initial_position: –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        dt_value: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π dt (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        pendulum: –æ–±—ä–µ–∫—Ç –º–∞—è—Ç–Ω–∏–∫–∞
        epsilon: –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–Ω—É–∫–∞–º–∏ –≤ –ø–∞—Ä–µ
        show: –≤—ã–≤–æ–¥–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
    Returns:
        list: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è scipy.optimize
    """
    constraints = []
    
    def make_constraint_func(pair_idx):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã."""
        def constraint_func(dt_all):
            return constraint_function(dt_all, initial_position, dt_value, pendulum, pair_idx, epsilon, show=False)
        return constraint_func
    
    for pair_idx in range(4):
        constraint = {
            'type': 'ineq',
            'fun': make_constraint_func(pair_idx)
        }
        constraints.append(constraint)
    
    if show:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(constraints)} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä –≤–Ω—É–∫–æ–≤ —Å epsilon={epsilon}")
    return constraints

# %%
def optimize_dt(initial_position, pendulum, dt_base=0.1, 
                epsilon=1e-3, dt_bounds=(0.001, 0.1), show=True):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ 12 dt (4 –¥–µ—Ç–µ–π + 8 –≤–Ω—É–∫–æ–≤) –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø–ª–æ—â–∞–¥–∏ —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∞
    –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä –≤–Ω—É–∫–æ–≤.
    
    Args:
        initial_position: –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –º–∞—è—Ç–Ω–∏–∫–∞
        pendulum: –æ–±—ä–µ–∫—Ç PendulumSystem
        dt_base: –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dt –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        epsilon: –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–Ω—É–∫–∞–º–∏ –≤ –ø–∞—Ä–µ
        dt_bounds: –∫–æ—Ä—Ç–µ–∂ (min_dt, max_dt) –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        show: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
        
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    
    if show:
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö 12 dt (4 –¥–µ—Ç–µ–π + 8 –≤–Ω—É–∫–æ–≤)")
        print(f"   üìç –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {initial_position}")
        print(f"   ‚è±Ô∏è  –ë–∞–∑–æ–≤—ã–π dt: {dt_base}")
        print(f"   üéØ Epsilon: {epsilon}")
        print(f"   üìè –ì—Ä–∞–Ω–∏—Ü—ã dt: {dt_bounds}")
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö 12 dt
    initial_guess = dt_base * np.hstack((np.ones(4), np.ones(8)/10))
    
    # –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö 12 dt
    bounds = [dt_bounds] * 12
    
    # –°–æ–∑–¥–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä
    constraints = create_constraints(initial_position, dt_base, pendulum, epsilon, show=show)
    
    # –°—á–µ—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è callback
    iteration_count = [0]
    
    def callback(xk):
        """Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        if show:
            iteration_count[0] += 1
            if iteration_count[0] % 10 == 0:
                # –†–∞–∑–¥–µ–ª—è–µ–º dt
                dt_children = xk[0:4]
                dt_grandchildren = xk[4:12]
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                tree = build_simple_tree(initial_position, dt_base, pendulum, 
                                       dt_children, dt_grandchildren, show=False)
                distances = calc_pair_distances(tree['grandchildren'], show=False)
                mean_points = calculate_mean_points(tree['grandchildren'], show=False)
                area = calculate_area(mean_points)
                
                print(f"   –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration_count[0]:3d}: –ø–ª–æ—â–∞–¥—å={area:.6f}, "
                      f"—Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è={[f'{d:.4f}' for d in distances]}")
    
    if show:
        print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é 12 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    result = minimize(
        fun=lambda dt_all: objective_function(dt_all, initial_position, dt_base, pendulum, show=False),
        x0=initial_guess,
        method='SLSQP',
        bounds=bounds,
        constraints=constraints,
        callback=callback if show else None,
        options={'maxiter': 1000, 'ftol': 1e-9}
    )
    
    if show:
        print(f"\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   üéØ –£—Å–ø–µ—Ö: {result.success}")
        print(f"   üìä –ò—Ç–µ—Ä–∞—Ü–∏–π: {result.nit}")
        print(f"   üìà –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {-result.fun:.6f}")
    
    if result.success:
        # –†–∞–∑–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ dt
        optimal_dt_children = result.x[0:4]
        optimal_dt_grandchildren = result.x[4:12]
        
        if show:
            print(f"   üçÑ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ dt –¥–µ—Ç–µ–π: {[f'{dt:.4f}' for dt in optimal_dt_children]}")
            print(f"   üë∂ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ dt –≤–Ω—É–∫–æ–≤: {[f'{dt:.4f}' for dt in optimal_dt_grandchildren]}")
        
        # –°—Ç—Ä–æ–∏–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
        final_tree = build_simple_tree(
            initial_position=initial_position,
            dt_value=dt_base, 
            pendulum=pendulum,
            dt_children=optimal_dt_children,
            dt_grandchildren=optimal_dt_grandchildren,
            show=False
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        final_distances = calc_pair_distances(final_tree['grandchildren'], show=False)
        if show:
            print(f"   üìè –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä: {[f'{d:.6f}' for d in final_distances]}")
            print(f"   ‚úÖ –í—Å–µ –ø–∞—Ä—ã —Å–æ—à–ª–∏—Å—å: {np.all(final_distances <= epsilon)}")
        
        return {
            'success': True,
            'optimal_dt_all': result.x,
            'optimal_dt_children': optimal_dt_children,
            'optimal_dt_grandchildren': optimal_dt_grandchildren,
            'final_area': -result.fun,
            'final_distances': final_distances,
            'tree': final_tree,
            'scipy_result': result
        }
    else:
        if show:
            print(f"   ‚ùå –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏: {result.message}")
        return {
            'success': False,
            'message': result.message,
            'scipy_result': result
        }

# %%
# –¢–∏—Ö–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
result = optimize_dt(
    initial_position=initial_pos, 
    pendulum=pendulum,
    dt_bounds=(0.001, 0.2),
    dt_base=0.1,
    epsilon=1e-3,
    show=False  # –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏–Ω—Ç—ã
)

# –¢–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if result['success']:
    print(f"–ü–ª–æ—â–∞–¥—å: {result['final_area']:.6f}")
    visualize_tree(result['tree'])

# %%
result


