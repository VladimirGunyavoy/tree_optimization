import numpy as np
import pandas as pd

# –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –ø–∞–π–ø–ª–∞–π–Ω–∞
from .compute_convergence_tables import compute_distance_derivative_table, compute_grandchild_parent_convergence_table
from .find_converging_pairs import find_converging_grandchild_pairs, find_converging_grandchild_parent_pairs
from .optimize_grandchild_pair_distance import optimize_grandchild_pair_distance
from .optimize_grandchild_parent_distance import optimize_grandchild_parent_distance
from .extract_pairs_from_chronology import extract_pairs_from_chronology


def find_optimal_pairs(tree, show=False):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –≤–Ω—É–∫–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ —Å–ø–æ—Ä —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç 6 —ç—Ç–∞–ø–æ–≤:
    1. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–µ–π —Å–±–ª–∏–∂–µ–Ω–∏—è –≤–Ω—É–∫-–≤–Ω—É–∫ –∏ –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å
    2. –ü–æ–∏—Å–∫ —Å–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –ø–∞—Ä
    3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ dt –∏ distance constraint
    4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –≤—Ä–µ–º–µ–Ω
    5. –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –≤—Å—Ç—Ä–µ—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    6. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –∏–∑ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
    
    Args:
        tree: SporeTree –æ–±—ä–µ–∫—Ç —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –¥–µ—Ç—å–º–∏ –∏ –≤–Ω—É–∫–∞–º–∏
        show: bool - –≤—ã–≤–æ–¥ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (False = —Ç–∏—à–∏–Ω–∞ + —Å–∫–æ—Ä–æ—Å—Ç—å)
        
    Returns:
        list: —Å–ø–∏—Å–æ–∫ –ø–∞—Ä [(gc_i, gc_j, meeting_info), ...] –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        None: –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ (–ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ –ª—é–±–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤)
    """
    
    # ============================================================================
    # –ü–†–û–í–ï–†–ö–ò –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
    # ============================================================================
    
    try:
        if not hasattr(tree, '_children_created') or not tree._children_created:
            if show:
                print("–û—à–∏–±–∫–∞: –í –¥–µ—Ä–µ–≤–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –¥–µ—Ç–∏. –í—ã–∑–æ–≤–∏—Ç–µ tree.create_children()")
            return None
            
        if not hasattr(tree, '_grandchildren_created') or not tree._grandchildren_created:
            if show:
                print("–û—à–∏–±–∫–∞: –í –¥–µ—Ä–µ–≤–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤–Ω—É–∫–∏. –í—ã–∑–æ–≤–∏—Ç–µ tree.create_grandchildren()")
            return None
            
        if len(tree.grandchildren) == 0:
            if show:
                print("–û—à–∏–±–∫–∞: –í –¥–µ—Ä–µ–≤–µ –Ω–µ—Ç –≤–Ω—É–∫–æ–≤")
            return None
            
        pendulum = tree.pendulum
        
        if show:
            print("–ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –ü–û–ò–°–ö–ê –û–ü–¢–ò–ú–ê–õ–¨–ù–´–• –ü–ê–†...")
            print("="*60)
            
    except Exception as e:
        if show:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    
    # ============================================================================
    # –≠–¢–ê–ü 1: –í–´–ß–ò–°–õ–ï–ù–ò–ï –°–ö–û–†–û–°–¢–ï–ô –°–ë–õ–ò–ñ–ï–ù–ò–Ø
    # ============================================================================
    
    try:
        if show:
            print("1Ô∏è‚É£ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–µ–π —Å–±–ª–∏–∂–µ–Ω–∏—è...", end=" ")
        
        # –°–∫–æ—Ä–æ—Å—Ç–∏ —Å–±–ª–∏–∂–µ–Ω–∏—è –≤–Ω—É–∫-–≤–Ω—É–∫
        convergence_gc_gc = compute_distance_derivative_table(
            tree.grandchildren, pendulum, show=show and False  # –î–µ—Ç–∞–ª—å–Ω—ã–π –¥–µ–±–∞–≥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        )
        
        # –°–∫–æ—Ä–æ—Å—Ç–∏ —Å–±–ª–∏–∂–µ–Ω–∏—è –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å
        convergence_gc_parent = compute_grandchild_parent_convergence_table(
            tree.grandchildren, tree.children, pendulum, show=show and False
        )
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        gc_gc_values = convergence_gc_gc.values
        upper_triangle = np.triu(gc_gc_values, k=1)
        valid_values = upper_triangle[upper_triangle != 0]
        gc_gc_converging_count = (valid_values < -1e-6).sum()
        
        gc_parent_values = convergence_gc_parent.values[~np.isnan(convergence_gc_parent.values)]
        gc_parent_converging_count = (gc_parent_values < -1e-6).sum()
        
        if show:
            print(f"‚úÖ ({gc_gc_converging_count} –ø–∞—Ä –≤–Ω—É–∫-–≤–Ω—É–∫, {gc_parent_converging_count} –ø–∞—Ä –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å)")
            
    except Exception as e:
        if show:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 1: {e}")
        return None
    
    # ============================================================================
    # –≠–¢–ê–ü 2: –ü–û–ò–°–ö –°–ë–õ–ò–ñ–ê–Æ–©–ò–•–°–Ø –ü–ê–†
    # ============================================================================
    
    try:
        if show:
            print("2Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –ø–∞—Ä...", end=" ")
        
        converging_gc_pairs = find_converging_grandchild_pairs(convergence_gc_gc, show=show and False)
        converging_gc_parent_pairs = find_converging_grandchild_parent_pairs(convergence_gc_parent, show=show and False)
        
        if len(converging_gc_pairs) == 0 and len(converging_gc_parent_pairs) == 0:
            if show:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–±–ª–∏–∂–∞—é—â–µ–π—Å—è –ø–∞—Ä—ã")
            return None
        
        if show:
            print(f"‚úÖ ({len(converging_gc_pairs)} –≤–Ω—É–∫-–≤–Ω—É–∫, {len(converging_gc_parent_pairs)} –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å)")
            
    except Exception as e:
        if show:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 2: {e}")
        return None
    
    # ============================================================================
    # –≠–¢–ê–ü 3: –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–ê–† (—Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏)
    # ============================================================================
    
    try:
        if show:
            print("3Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä...", end=" ")
        
        # –í—ã—á–∏—Å–ª—è–µ–º distance constraint
        parent_distances = [np.linalg.norm(parent['position'] - tree.root['position']) for parent in tree.children]
        min_parent_distance = min(parent_distances)
        distance_constraint = min_parent_distance / 10.0
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã dt
        parent_times = [abs(child['dt']) for child in tree.children]
        max_parent_time = max(parent_times)
        adaptive_dt_max = 2 * max_parent_time
        
        if show:
            print(f"\n    üìè Distance constraint: {distance_constraint:.5f}")
            print(f"    üìä –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã dt: (0.001, {adaptive_dt_max:.5f})")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–Ω—É–∫-–≤–Ω—É–∫
        gc_gc_optimization_results = {}
        for pair in converging_gc_pairs:
            gc_i_idx = pair['gc_i']
            gc_j_idx = pair['gc_j']
            pair_name = pair['pair_name']
            
            if show:
                print(f"    üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {pair_name}...")
            
            result = optimize_grandchild_pair_distance(
                gc_i_idx, gc_j_idx, 
                tree.grandchildren, tree.children, pendulum,
                dt_bounds=None,  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
                root_position=tree.root['position'],
                show=show and False  # –î–µ—Ç–∞–ª—å–Ω—ã–π –¥–µ–±–∞–≥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            )
            
            gc_gc_optimization_results[pair_name] = result
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å
        gc_parent_optimization_results = {}
        for pair in converging_gc_parent_pairs:
            gc_idx = pair['gc_idx']
            parent_idx = pair['parent_idx']
            pair_name = pair['pair_name']
            
            if show:
                print(f"    üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {pair_name}...")
            
            result = optimize_grandchild_parent_distance(
                gc_idx, parent_idx,
                tree.grandchildren, tree.children, pendulum,
                dt_bounds=None,  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
                show=show and False
            )
            
            gc_parent_optimization_results[pair_name] = result
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        gc_gc_success = sum(1 for r in gc_gc_optimization_results.values() if r['success'])
        gc_gc_constraint_pass = sum(1 for r in gc_gc_optimization_results.values() 
                                   if r['success'] and r.get('passes_constraint', True))
        gc_parent_success = sum(1 for r in gc_parent_optimization_results.values() if r['success'])
        
        if gc_gc_constraint_pass == 0 and gc_parent_success == 0:
            if show:
                print("‚ùå –ù–∏ –æ–¥–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ constraint –∏–ª–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return None
        
        if show:
            print(f"    ‚úÖ ({gc_gc_constraint_pass}/{len(converging_gc_pairs)} –≤–Ω—É–∫-–≤–Ω—É–∫ —É—Å–ø–µ—à–Ω–æ, {gc_parent_success}/{len(converging_gc_parent_pairs)} –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ)")
            
    except Exception as e:
        if show:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 3: {e}")
        return None
    
    # ============================================================================
    # –≠–¢–ê–ü 4: –ü–û–°–¢–†–û–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶
    # ============================================================================
    
    try:
        if show:
            print("4Ô∏è‚É£ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...", end=" ")
        
        n_gc = len(tree.grandchildren)
        n_parents = len(tree.children)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
        gc_gc_distance_table = np.full((n_gc, n_gc), np.nan)
        gc_gc_time_i_table = np.full((n_gc, n_gc), np.nan)
        gc_gc_time_j_table = np.full((n_gc, n_gc), np.nan)
        gc_parent_distance_table = np.full((n_gc, n_parents), np.nan)
        gc_parent_time_table = np.full((n_gc, n_parents), np.nan)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤–Ω—É–∫-–≤–Ω—É–∫
        filled_gc_gc = 0
        for pair_name, result in gc_gc_optimization_results.items():
            if result['success'] and result.get('passes_constraint', True):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏–∑ –∏–º–µ–Ω–∏ –ø–∞—Ä—ã
                parts = pair_name.split('-')
                gc_i_idx = int(parts[0].split('_')[1])
                gc_j_idx = int(parts[1].split('_')[1])
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                gc_gc_distance_table[gc_i_idx, gc_j_idx] = result['min_distance']
                gc_gc_distance_table[gc_j_idx, gc_i_idx] = result['min_distance']
                
                gc_gc_time_i_table[gc_i_idx, gc_j_idx] = result['optimal_dt_i']
                gc_gc_time_j_table[gc_i_idx, gc_j_idx] = result['optimal_dt_j']
                gc_gc_time_i_table[gc_j_idx, gc_i_idx] = result['optimal_dt_j']
                gc_gc_time_j_table[gc_j_idx, gc_i_idx] = result['optimal_dt_i']
                
                filled_gc_gc += 1
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å
        filled_gc_parent = 0
        for pair_name, result in gc_parent_optimization_results.items():
            if result['success']:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏–∑ –∏–º–µ–Ω–∏ –ø–∞—Ä—ã
                parts = pair_name.split('-')
                gc_idx = int(parts[0].split('_')[1])
                parent_idx = int(parts[1].split('_')[1])
                
                gc_parent_distance_table[gc_idx, parent_idx] = result['min_distance']
                gc_parent_time_table[gc_idx, parent_idx] = result['optimal_dt']
                filled_gc_parent += 1
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        row_names_gc = [f"gc_{i}" for i in range(n_gc)]
        col_names_gc = [f"gc_{i}" for i in range(n_gc)]
        col_names_parent = [f"parent_{i}" for i in range(n_parents)]
        
        distance_gc_gc_df = pd.DataFrame(gc_gc_distance_table, index=row_names_gc, columns=col_names_gc)
        time_i_gc_gc_df = pd.DataFrame(gc_gc_time_i_table, index=row_names_gc, columns=col_names_gc)
        time_j_gc_gc_df = pd.DataFrame(gc_gc_time_j_table, index=row_names_gc, columns=col_names_gc)
        distance_gc_parent_df = pd.DataFrame(gc_parent_distance_table, index=row_names_gc, columns=col_names_parent)
        time_gc_parent_df = pd.DataFrame(gc_parent_time_table, index=row_names_gc, columns=col_names_parent)
        
        if filled_gc_gc == 0 and filled_gc_parent == 0:
            if show:
                print("‚ùå –ù–∏ –æ–¥–Ω–∞ —è—á–µ–π–∫–∞ —Ç–∞–±–ª–∏—Ü –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
            return None
        
        if show:
            print(f"‚úÖ ({filled_gc_gc} —è—á–µ–µ–∫ –≤–Ω—É–∫-–≤–Ω—É–∫, {filled_gc_parent} —è—á–µ–µ–∫ –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å)")
            
    except Exception as e:
        if show:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 4: {e}")
        return None
    
    # ============================================================================
    # –≠–¢–ê–ü 5: –°–û–ó–î–ê–ù–ò–ï –•–†–û–ù–û–õ–û–ì–ò–ò
    # ============================================================================
    
    try:
        if show:
            print("5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –≤—Å—Ç—Ä–µ—á...", end=" ")
        
        # –°–æ–∑–¥–∞–µ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é –∏–∑ —Ç–∞–±–ª–∏—Ü
        chronology = {}
        
        for gc_idx in range(len(tree.grandchildren)):
            meetings = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ —Å –¥—Ä—É–≥–∏–º–∏ –≤–Ω—É–∫–∞–º–∏
            for other_gc_idx in range(len(tree.grandchildren)):
                if gc_idx == other_gc_idx:
                    continue
                    
                distance = distance_gc_gc_df.iloc[gc_idx, other_gc_idx]
                if not np.isnan(distance):
                    time_i = time_i_gc_gc_df.iloc[gc_idx, other_gc_idx]
                    time_j = time_j_gc_gc_df.iloc[gc_idx, other_gc_idx]
                    
                    # –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ = –º–∞–∫—Å–∏–º—É–º –∏–∑ –¥–≤—É—Ö –≤—Ä–µ–º–µ–Ω
                    meeting_time = max(abs(time_i), abs(time_j))
                    
                    meeting = {
                        'type': 'grandchild',
                        'partner': f"gc_{other_gc_idx}",
                        'partner_idx': other_gc_idx,
                        'distance': distance,
                        'time_gc': time_i,
                        'time_partner': time_j,
                        'meeting_time': meeting_time,
                        'who_waits': 'gc' if abs(time_i) > abs(time_j) else 'partner'
                    }
                    meetings.append(meeting)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ —Å —á—É–∂–∏–º–∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏
            for parent_idx in range(len(tree.children)):
                if parent_idx == tree.grandchildren[gc_idx]['parent_idx']:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
                    continue
                    
                distance = distance_gc_parent_df.iloc[gc_idx, parent_idx]
                if not np.isnan(distance):
                    time_gc = time_gc_parent_df.iloc[gc_idx, parent_idx]
                    
                    meeting = {
                        'type': 'parent',
                        'partner': f"parent_{parent_idx}",
                        'partner_idx': parent_idx,
                        'distance': distance,
                        'time_gc': time_gc,
                        'time_partner': None,
                        'meeting_time': abs(time_gc),
                        'who_waits': None
                    }
                    meetings.append(meeting)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏ (–•–†–û–ù–û–õ–û–ì–ò–Ø!)
            meetings.sort(key=lambda x: x['meeting_time'])
            chronology[gc_idx] = meetings
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
        total_meetings = sum(len(meetings) for meetings in chronology.values())
        unique_gc_meetings = sum(len([m for m in meetings if m['type'] == 'grandchild']) 
                                for meetings in chronology.values()) // 2
        total_parent_meetings = sum(len([m for m in meetings if m['type'] == 'parent']) 
                                   for meetings in chronology.values())
        
        if unique_gc_meetings == 0 and total_parent_meetings == 0:
            if show:
                print("‚ùå –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –ø—É—Å—Ç–∞ - –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á")
            return None
        
        if show:
            print(f"‚úÖ ({unique_gc_meetings} –≤—Å—Ç—Ä–µ—á –≤–Ω—É–∫-–≤–Ω—É–∫, {total_parent_meetings} –≤—Å—Ç—Ä–µ—á –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å)")
            
    except Exception as e:
        if show:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 5: {e}")
        return None
    
    # ============================================================================
    # –≠–¢–ê–ü 6: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–´–• –ü–ê–†
    # ============================================================================
    
    try:
        if show:
            print("6Ô∏è‚É£ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä –∏–∑ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏...", end=" ")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä—ã
        final_pairs = extract_pairs_from_chronology(chronology, show=show and False)
        
        if not final_pairs:
            if show:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã")
            return None
        
        if show:
            print(f"‚úÖ ({len(final_pairs)} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä)")
            
    except Exception as e:
        if show:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 6: {e}")
        return None
    
    # ============================================================================
    # –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –†–ï–ó–£–õ–¨–¢–ê–¢
    # ============================================================================
    
    if show:
        print("\n" + "="*60)
        print("üèÅ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("="*60)
        
        print(f"üìä –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã dt: (0.001, {adaptive_dt_max:.5f})")
        print(f"üìè Distance constraint: {distance_constraint:.5f}")
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º:")
        print(f"  1Ô∏è‚É£ –°–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –ø–∞—Ä –Ω–∞–π–¥–µ–Ω–æ: {len(converging_gc_pairs)} –≤–Ω—É–∫-–≤–Ω—É–∫ + {len(converging_gc_parent_pairs)} –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å")
        print(f"  2Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {gc_gc_constraint_pass}/{len(converging_gc_pairs)} –≤–Ω—É–∫-–≤–Ω—É–∫ + {gc_parent_success}/{len(converging_gc_parent_pairs)} –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å")
        print(f"  3Ô∏è‚É£ –¢–∞–±–ª–∏—Ü—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {filled_gc_gc} —è—á–µ–µ–∫ –≤–Ω—É–∫-–≤–Ω—É–∫ + {filled_gc_parent} —è—á–µ–µ–∫ –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å")
        print(f"  4Ô∏è‚É£ –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞: {unique_gc_meetings} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –≤–Ω—É–∫-–≤–Ω—É–∫ + {total_parent_meetings} –≤—Å—Ç—Ä–µ—á –≤–Ω—É–∫-—Ä–æ–¥–∏—Ç–µ–ª—å")
        print(f"  5Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(final_pairs)}")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä
        if final_pairs:
            distances = [meeting['distance'] for _, _, meeting in final_pairs]
            times = [meeting['meeting_time'] for _, _, meeting in final_pairs]
            
            print(f"\nüéØ –ö–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä:")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {np.mean(distances):.6f}")
            print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {np.min(distances):.6f}")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {np.max(distances):.6f}")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: {np.mean(times):.6f}—Å")
            
            # –ö–∞—á–µ—Å—Ç–≤–æ —Å–±–ª–∏–∂–µ–Ω–∏—è
            ultra_close = sum(1 for d in distances if d < 1e-6)
            very_close = sum(1 for d in distances if d < 1e-5)
            close = sum(1 for d in distances if d < 1e-4)
            
            print(f"  –£–ª—å—Ç—Ä–∞-–±–ª–∏–∑–∫–∏–µ (< 1e-6): {ultra_close}/{len(final_pairs)}")
            print(f"  –û—á–µ–Ω—å –±–ª–∏–∑–∫–∏–µ (< 1e-5): {very_close}/{len(final_pairs)}")
            print(f"  –ë–ª–∏–∑–∫–∏–µ (< 1e-4): {close}/{len(final_pairs)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º–∏ –ø–∞—Ä—ã
        print(f"\nüë• –§–ò–ù–ê–õ–¨–ù–´–ï –ü–ê–†–´:")
        for i, (gc_i, gc_j, meeting_info) in enumerate(final_pairs):
            gc_i_info = tree.grandchildren[gc_i]
            gc_j_info = tree.grandchildren[gc_j]
            direction_i = "F" if gc_i_info['dt'] > 0 else "B"
            direction_j = "F" if gc_j_info['dt'] > 0 else "B"
            
            print(f"  {i+1}. gc_{gc_i}({direction_i}) ‚Üî gc_{gc_j}({direction_j}): "
                  f"—Ä–∞—Å—Å—Ç={meeting_info['distance']:.6f}, t={meeting_info['meeting_time']:.6f}—Å")
        
        print("="*60)
    
    return final_pairs