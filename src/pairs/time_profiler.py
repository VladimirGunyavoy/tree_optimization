import time
from typing import Dict, Optional


class StageProfiler:
    """
    –ü—Ä–æ—Å—Ç–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        profiler = StageProfiler(show=True)
        profiler.start_stage("–≠—Ç–∞–ø 1", "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü")
        # ... –∫–æ–¥ —ç—Ç–∞–ø–∞ ...
        profiler.end_stage("–≠—Ç–∞–ø 1")
        
        summary = profiler.get_summary()
    """
    
    def __init__(self, show: bool = True):
        """
        Args:
            show: –µ—Å–ª–∏ True, –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
        """
        self.show = show
        self.stages: Dict[str, dict] = {}
        self.current_stage: Optional[str] = None
        self.start_time: Optional[float] = None
        self.total_start_time: Optional[float] = None
        
    def start_profiling(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–±—â–µ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.total_start_time = time.time()
        if self.show:
            print("üöÄ –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï –ù–ê–ß–ê–¢–û")
            print("=" * 50)
    
    def start_stage(self, stage_name: str, description: str = ""):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–∞–ø–∞
        
        Args:
            stage_name: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —ç—Ç–∞–ø–∞
            description: –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        """
        if self.current_stage is not None:
            if self.show:
                print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø '{self.current_stage}' –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        self.current_stage = stage_name
        self.start_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —ç—Ç–∞–ø–∞
        self.stages[stage_name] = {
            'description': description,
            'start_time': self.start_time,
            'end_time': None,
            'duration': None,
            'status': 'running'
        }
        
        if self.show:
            stage_info = f" - {description}" if description else ""
            print(f"‚è±Ô∏è  {stage_name}{stage_info}...", end=" ", flush=True)
    
    def end_stage(self, stage_name: str, details: str = ""):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–∞–ø–∞
        
        Args:
            stage_name: –∏–º—è —ç—Ç–∞–ø–∞ (–¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å start_stage)
            details: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        """
        if self.current_stage != stage_name:
            if self.show:
                print(f"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø '{stage_name}', –Ω–æ —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø '{self.current_stage}'")
            return
        
        end_time = time.time()
        duration = end_time - self.start_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —ç—Ç–∞–ø–∞
        self.stages[stage_name].update({
            'end_time': end_time,
            'duration': duration,
            'status': 'completed',
            'details': details
        })
        
        self.current_stage = None
        
        if self.show:
            details_info = f" ({details})" if details else ""
            print(f"‚úÖ {self._format_duration(duration)}{details_info}")
    
    def fail_stage(self, stage_name: str, error_msg: str = ""):
        """
        –û—Ç–º–µ—á–∞–µ—Ç —ç—Ç–∞–ø –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π
        
        Args:
            stage_name: –∏–º—è —ç—Ç–∞–ø–∞
            error_msg: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        if self.current_stage == stage_name:
            end_time = time.time()
            duration = end_time - self.start_time
            
            self.stages[stage_name].update({
                'end_time': end_time,
                'duration': duration,
                'status': 'failed',
                'error': error_msg
            })
            
            self.current_stage = None
            
            if self.show:
                error_info = f" - {error_msg}" if error_msg else ""
                print(f"‚ùå {self._format_duration(duration)}{error_info}")
    
    def get_summary(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —ç—Ç–∞–ø–∞–º
        
        Returns:
            dict: —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∞—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        """
        total_duration = 0
        completed_stages = 0
        failed_stages = 0
        
        stage_times = {}
        
        for stage_name, stage_info in self.stages.items():
            if stage_info['duration'] is not None:
                total_duration += stage_info['duration']
                stage_times[stage_name] = stage_info['duration']
                
                if stage_info['status'] == 'completed':
                    completed_stages += 1
                elif stage_info['status'] == 'failed':
                    failed_stages += 1
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        total_elapsed = None
        if self.total_start_time is not None:
            total_elapsed = time.time() - self.total_start_time
        
        return {
            'total_stages': len(self.stages),
            'completed_stages': completed_stages,
            'failed_stages': failed_stages,
            'total_duration': total_duration,
            'total_elapsed': total_elapsed,
            'stage_times': stage_times,
            'stages_detail': self.stages.copy()
        }
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        summary = self.get_summary()
        
        if not self.show:
            return
        
        print("\n" + "=" * 50)
        print("üìä –°–í–û–î–ö–ê –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"–í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤: {summary['total_stages']}")
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {summary['completed_stages']}")
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π: {summary['failed_stages']}")
        
        if summary['total_elapsed']:
            print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {self._format_duration(summary['total_elapsed'])}")
        if summary['total_duration'] > 0:
            print(f"–í—Ä–µ–º—è —ç—Ç–∞–ø–æ–≤: {self._format_duration(summary['total_duration'])}")
        
        print()
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —ç—Ç–∞–ø–∞–º
        if summary['stage_times']:
            print("üìà –í—Ä–µ–º—è –ø–æ —ç—Ç–∞–ø–∞–º:")
            for stage_name, duration in summary['stage_times'].items():
                stage_info = self.stages[stage_name]
                percentage = (duration / summary['total_duration']) * 100 if summary['total_duration'] > 0 else 0
                
                status_icon = "‚úÖ" if stage_info['status'] == 'completed' else "‚ùå"
                details = stage_info.get('details', '')
                details_str = f" - {details}" if details else ""
                
                print(f"  {status_icon} {stage_name}: {self._format_duration(duration)} ({percentage:.1f}%){details_str}")
        
        print("=" * 50)
    
    def _format_duration(self, duration: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if duration < 0.001:
            return f"{duration * 1000000:.0f}Œºs"
        elif duration < 1.0:
            return f"{duration * 1000:.1f}ms"
        elif duration < 60:
            return f"{duration:.2f}s"
        else:
            minutes = int(duration // 60)
            seconds = duration % 60
            return f"{minutes}m {seconds:.1f}s"