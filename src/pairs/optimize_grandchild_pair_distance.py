def optimize_grandchild_pair_distance(gc_i_idx, gc_j_idx, grandchildren, children, pendulum, 
                                     dt_bounds=None, root_position=None, show=False):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç dt –¥–ª—è –ø–∞—Ä—ã –≤–Ω—É–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏.
    –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –¥–µ–±–∞–≥–æ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
    """
    import numpy as np
    from scipy.optimize import minimize
    
    gc_i = grandchildren[gc_i_idx]
    gc_j = grandchildren[gc_j_idx]
    
    # –í–´–ß–ò–°–õ–Ø–ï–ú DISTANCE_CONSTRAINT
    if root_position is not None:
        parent_distances = []
        for parent in children:
            distance = np.linalg.norm(parent['position'] - root_position)
            parent_distances.append(distance)
        min_parent_distance = min(parent_distances)
        distance_constraint = min_parent_distance / 10.0
        if show:
            print(f"    Distance constraint: {distance_constraint:.5f} (1/10 –æ—Ç –º–∏–Ω. —Ä–∞—Å—Å—Ç. –∫–æ—Ä–µ–Ω—å-—Ä–æ–¥–∏—Ç–µ–ª–∏: {min_parent_distance:.5f})")
    else:
        distance_constraint = None
    
    # –ü–æ–∑–∏—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏)
    parent_i_pos = children[gc_i['parent_idx']]['position']
    parent_j_pos = children[gc_j['parent_idx']]['position']
    
    # –ê–î–ê–ü–¢–ò–í–ù–´–ï –ì–†–ê–ù–ò–¶–´: –æ—Ç 0 –¥–æ 2 * –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    if dt_bounds is None:
        parent_times = [abs(child['dt']) for child in children]
        max_parent_time = max(parent_times)
        dt_max = 2 * max_parent_time
        dt_bounds = (0.001, dt_max)  # –ú–∏–Ω–∏–º—É–º 0.001 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω—É–ª—è
        
        if show:
            print(f"    üìä –í—Ä–µ–º–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {[f'{t:.5f}' for t in parent_times]}")
            print(f"    üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–¥–∏—Ç–µ–ª—è: {max_parent_time:.5f}")
            print(f"    üìä –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã dt: (0.001, {dt_max:.5f})")
    else:
        if show:
            print(f"    üìä –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã dt: {dt_bounds}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã dt –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–Ω—É–∫–∞
    original_dt_i = gc_i['dt']
    original_dt_j = gc_j['dt']
    
    if original_dt_i > 0:
        dt_i_bounds = dt_bounds
        direction_i = "forward"
    else:
        dt_i_bounds = (-dt_bounds[1], -dt_bounds[0])
        direction_i = "backward"
    
    if original_dt_j > 0:
        dt_j_bounds = dt_bounds
        direction_j = "forward"
    else:
        dt_j_bounds = (-dt_bounds[1], -dt_bounds[0])
        direction_j = "backward"
    
    if show:
        print(f"    –í–Ω—É–∫ i (gc_{gc_i_idx}): original_dt={original_dt_i:+.5f} ({direction_i})")
        print(f"    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è i: dt ‚àà [{dt_i_bounds[0]:.3f}, {dt_i_bounds[1]:.3f}]")
        print(f"    –í–Ω—É–∫ j (gc_{gc_j_idx}): original_dt={original_dt_j:+.5f} ({direction_j})")
        print(f"    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è j: dt ‚àà [{dt_j_bounds[0]:.3f}, {dt_j_bounds[1]:.3f}]")
    
    def distance_function(dt_params):
        """–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –¥–≤–∏–∂—É—â–∏–º–∏—Å—è –≤–Ω—É–∫–∞–º–∏"""
        dt_i, dt_j = dt_params
        
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±–æ–∏—Ö –≤–Ω—É–∫–æ–≤
            pos_i = pendulum.step(parent_i_pos, gc_i['control'], dt_i)
            pos_j = pendulum.step(parent_j_pos, gc_j['control'], dt_j)
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–∏–º–∏
            distance = np.linalg.norm(pos_i - pos_j)
            
            return distance
            
        except Exception as e:
            if show:
                print(f"    –û—à–∏–±–∫–∞ –≤ distance_function: {e}")
            return 1e6
    
    # –ì—Ä–∞–Ω–∏—Ü—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    bounds = [dt_i_bounds, dt_j_bounds]
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    x0_i = (dt_i_bounds[0] + dt_i_bounds[1]) / 2
    x0_j = (dt_j_bounds[0] + dt_j_bounds[1]) / 2
    x0 = [x0_i, x0_j]
    
    if show:
        print(f"    –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ: dt_i={x0_i:.3f}, dt_j={x0_j:.3f}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–µ
        initial_distance = distance_function(x0)
        print(f"    –ù–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {initial_distance:.6f}")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å –î–ï–¢–ê–õ–¨–ù–´–ú –ê–ù–ê–õ–ò–ó–û–ú
    methods = ['L-BFGS-B', 'Nelder-Mead', 'Powell']
    
    best_result = None
    best_distance = float('inf')
    all_results = {}
    
    for method in methods:
        try:
            if method == 'L-BFGS-B':
                result = minimize(
                    distance_function,
                    x0=x0,
                    bounds=bounds,
                    method=method,
                    options={'ftol': 1e-12, 'gtol': 1e-8, 'maxiter': 1000}
                )
            elif method == 'Nelder-Mead':
                result = minimize(
                    distance_function,
                    x0=x0,
                    method=method,
                    options={'xatol': 1e-12, 'fatol': 1e-12, 'maxiter': 1000}
                )
            elif method == 'Powell':
                result = minimize(
                    distance_function,
                    x0=x0,
                    method=method,
                    options={'ftol': 1e-12, 'xtol': 1e-12, 'maxiter': 1000}
                )
            
            # –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê
            if show:
                print(f"    –ú–µ—Ç–æ–¥ {method}: success={result.success}, fun={result.fun:.8f}")
                print(f"    –ú–µ—Ç–æ–¥ {method}: result.x={result.x}")
                print(f"    –ú–µ—Ç–æ–¥ {method}: nit={getattr(result, 'nit', 'N/A')}")
                if hasattr(result, 'message'):
                    print(f"    –ú–µ—Ç–æ–¥ {method}: message='{result.message}'")
                if hasattr(result, 'nfev'):
                    print(f"    –ú–µ—Ç–æ–¥ {method}: nfev={result.nfev}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            all_results[method] = {
                'result': result,
                'success': result.success,
                'fun': result.fun,
                'x': result.x.copy(),
                'message': getattr(result, 'message', 'N/A')
            }
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –í–†–£–ß–ù–£–Æ
            if len(result.x) >= 2:
                dt_i_test, dt_j_test = result.x[0], result.x[1]
                dt_i_in_bounds = dt_i_bounds[0] <= dt_i_test <= dt_i_bounds[1]
                dt_j_in_bounds = dt_j_bounds[0] <= dt_j_test <= dt_j_bounds[1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º constraint –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                distance_ok = True
                if distance_constraint is not None:
                    test_distance = distance_function(result.x)
                    distance_ok = test_distance <= distance_constraint
                else:
                    test_distance = result.fun
                
                if show:
                    print(f"    –ú–µ—Ç–æ–¥ {method}: dt_i –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö: {dt_i_in_bounds} ({dt_i_test:.6f})")
                    print(f"    –ú–µ—Ç–æ–¥ {method}: dt_j –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö: {dt_j_in_bounds} ({dt_j_test:.6f})")
                    print(f"    –ú–µ—Ç–æ–¥ {method}: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {test_distance:.8f}")
                    print(f"    –ú–µ—Ç–æ–¥ {method}: –ø—Ä–æ—Ö–æ–¥–∏—Ç constraint: {distance_ok}")
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏:
                # 1. –ì—Ä–∞–Ω–∏—Ü—ã —Å–æ–±–ª—é–¥–µ–Ω—ã 
                # 2. Constraint —Å–æ–±–ª—é–¥–µ–Ω
                # 3. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
                # –ò–ì–ù–û–†–ò–†–£–ï–ú success=False –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ—Ä–æ—à–∏–π!
                
                bounds_ok = dt_i_in_bounds and dt_j_in_bounds
                
                if bounds_ok and distance_ok and test_distance < best_distance:
                    best_result = result
                    best_distance = test_distance
                    if show:
                        print(f"    –ú–µ—Ç–æ–¥ {method}: ‚úÖ –ü–†–ò–ù–Ø–¢ –∫–∞–∫ –ª—É—á—à–∏–π (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º success={result.success})")
                else:
                    if show:
                        reasons = []
                        if not bounds_ok:
                            reasons.append("–≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü")
                        if not distance_ok:
                            reasons.append("–Ω–∞—Ä—É—à–µ–Ω constraint")
                        if test_distance >= best_distance:
                            reasons.append(f"—Ö—É–∂–µ distance ({test_distance:.6f} >= {best_distance:.6f})")
                        print(f"    –ú–µ—Ç–æ–¥ {method}: ‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω ({'; '.join(reasons)})")
            else:
                if show:
                    print(f"    –ú–µ—Ç–æ–¥ {method}: ‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π result.x)")
                
        except Exception as e:
            if show:
                print(f"    –ú–µ—Ç–æ–¥ {method}: ‚ùå –æ—à–∏–±–∫–∞ {e}")
            all_results[method] = {'error': str(e)}
            continue
    
    # –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
    if show:
        print(f"\n    üîç –°–í–û–î–ö–ê –í–°–ï–• –ú–ï–¢–û–î–û–í:")
        for method, data in all_results.items():
            if 'error' in data:
                print(f"      {method}: –û–®–ò–ë–ö–ê - {data['error']}")
            else:
                status = "‚úÖ –ø—Ä–∏–Ω—è—Ç" if best_result == data['result'] else "‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω"
                print(f"      {method}: success={data['success']}, fun={data['fun']:.8f}, {status}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if best_result is not None and best_distance < 1e5:
        optimal_dt_i, optimal_dt_j = best_result.x
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏
        dt_i_valid = dt_i_bounds[0] <= optimal_dt_i <= dt_i_bounds[1]
        dt_j_valid = dt_j_bounds[0] <= optimal_dt_j <= dt_j_bounds[1]
        
        if not dt_i_valid:
            if show:
                print(f"    üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: optimal_dt_i={optimal_dt_i:.5f} –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü {dt_i_bounds}")
            return {'success': False, 'error': 'dt_i violation', 'all_results': all_results}
            
        if not dt_j_valid:
            if show:
                print(f"    üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: optimal_dt_j={optimal_dt_j:.5f} –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü {dt_j_bounds}")
            return {'success': False, 'error': 'dt_j violation', 'all_results': all_results}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏
        if (original_dt_i > 0 and optimal_dt_i <= 0) or (original_dt_i < 0 and optimal_dt_i >= 0):
            if show:
                print(f"    üö® –û–®–ò–ë–ö–ê: –≤–Ω—É–∫ i –∏–∑–º–µ–Ω–∏–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: {original_dt_i:+.5f} ‚Üí {optimal_dt_i:+.5f}")
            return {'success': False, 'error': 'time direction violation i', 'all_results': all_results}
            
        if (original_dt_j > 0 and optimal_dt_j <= 0) or (original_dt_j < 0 and optimal_dt_j >= 0):
            if show:
                print(f"    üö® –û–®–ò–ë–ö–ê: –≤–Ω—É–∫ j –∏–∑–º–µ–Ω–∏–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: {original_dt_j:+.5f} ‚Üí {optimal_dt_j:+.5f}")
            return {'success': False, 'error': 'time direction violation j', 'all_results': all_results}
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        final_pos_i = pendulum.step(parent_i_pos, gc_i['control'], optimal_dt_i)
        final_pos_j = pendulum.step(parent_j_pos, gc_j['control'], optimal_dt_j)
        
        return {
            'success': True,
            'min_distance': best_distance,
            'optimal_dt_i': optimal_dt_i,
            'optimal_dt_j': optimal_dt_j,
            'final_position_i': final_pos_i,
            'final_position_j': final_pos_j,
            'method_used': 'enhanced_multi_method',
            'distance_constraint': distance_constraint,
            'passes_constraint': distance_constraint is None or best_distance <= distance_constraint,
            'constraints': {
                'direction_i': direction_i,
                'direction_j': direction_j,
                'bounds_i': dt_i_bounds,
                'bounds_j': dt_j_bounds
            },
            'all_results': all_results,  # –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–∞—Ö
            'best_method': next(method for method, data in all_results.items() 
                               if 'result' in data and data['result'] == best_result),
            'iterations': getattr(best_result, 'nit', 0)
        }
    else:
        return {
            'success': False,
            'min_distance': float('inf'),
            'method_used': 'failed',
            'distance_constraint': distance_constraint,
            'passes_constraint': False,
            'constraints': {
                'direction_i': direction_i,
                'direction_j': direction_j,
                'bounds_i': dt_i_bounds,
                'bounds_j': dt_j_bounds
            },
            'all_results': all_results,  # –î–∞–∂–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø—Ä–æ–±–æ–≤–∞–ª–∏
            'error': 'no_valid_solution'
        }

