def optimize_grandchild_parent_distance(gc_idx, parent_idx, grandchildren, children, pendulum,
                                       dt_bounds=None, show=False):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç dt –¥–ª—è –≤–Ω—É–∫–∞ —á—Ç–æ–±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é.
    –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ dt.
    """
    import numpy as np
    from scipy.optimize import minimize_scalar
    
    gc = grandchildren[gc_idx]
    parent = children[parent_idx]
    
    # –ü–æ–∑–∏—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è –≤–Ω—É–∫–∞ (—Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞)
    gc_parent_pos = children[gc['parent_idx']]['position']
    
    # –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (–ø–æ–∑–∏—Ü–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è)
    target_parent_pos = parent['position']
    
    # –ê–î–ê–ü–¢–ò–í–ù–´–ï –ì–†–ê–ù–ò–¶–´: –æ—Ç 0 –¥–æ 2 * –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    if dt_bounds is None:
        parent_times = [abs(child['dt']) for child in children]
        max_parent_time = max(parent_times)
        dt_max = 2 * max_parent_time
        dt_bounds = (0.001, dt_max)  # –ú–∏–Ω–∏–º—É–º 0.001 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω—É–ª—è
        
        if show:
            print(f"    üìä –í—Ä–µ–º–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {[f'{t:.5f}' for t in parent_times]}")
            print(f"    üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–¥–∏—Ç–µ–ª—è: {max_parent_time:.5f}")
            print(f"    üìä –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã dt: (0.001, {dt_max:.5f})")
    else:
        if show:
            print(f"    üìä –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã dt: {dt_bounds}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω dt –¥–ª—è –≤–Ω—É–∫–∞
    original_dt = gc['dt']
    
    if original_dt > 0:  # Forward –≤–Ω—É–∫ - —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ dt
        dt_bounds_signed = dt_bounds  # (0.001, dt_max)
        direction = "forward"
    else:  # Backward –≤–Ω—É–∫ - —Ç–æ–ª—å–∫–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ dt
        dt_bounds_signed = (-dt_bounds[1], -dt_bounds[0])  # (-dt_max, -0.001)
        direction = "backward"
    
    if show:
        print(f"    –í–Ω—É–∫ gc_{gc_idx} ({direction}) –∫ —Ä–æ–¥–∏—Ç–µ–ª—é {parent_idx}")
        print(f"    dt ‚àà [{dt_bounds_signed[0]:.3f}, {dt_bounds_signed[1]:.3f}]")
    
    def distance_function(dt):
        """–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –≤–Ω—É–∫–∞ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤–Ω—É–∫–∞
            gc_final_pos = pendulum.step(gc_parent_pos, gc['control'], dt)
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
            distance = np.linalg.norm(gc_final_pos - target_parent_pos)
            
            return distance
            
        except Exception as e:
            if show:
                print(f"    –û—à–∏–±–∫–∞ –≤ distance_function: {e}")
            return 1e6
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–µ
    if show:
        mid_point = (dt_bounds_signed[0] + dt_bounds_signed[1]) / 2
        initial_distance = distance_function(mid_point)
        print(f"    –ù–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (dt={mid_point:.5f}): {initial_distance:.6f}")
    
    # –û–¥–Ω–æ–º–µ—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    try:
        result = minimize_scalar(
            distance_function,
            bounds=dt_bounds_signed,
            method='bounded',
            options={'xatol': 1e-12, 'maxiter': 1000}
        )
        
        if show:
            print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: success={result.success}, min_distance={result.fun:.8f}")
            print(f"    –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π dt: {result.x:.8f}")
            if hasattr(result, 'message'):
                print(f"    Message: '{result.message}'")
            if hasattr(result, 'nfev'):
                print(f"    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞: {result.nfev} —Ä–∞–∑")
        
        if result.success:
            optimal_dt = result.x
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
            dt_in_bounds = dt_bounds_signed[0] <= optimal_dt <= dt_bounds_signed[1]
            
            if show:
                print(f"    dt –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö: {dt_in_bounds}")
            
            if dt_in_bounds:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                final_pos = pendulum.step(gc_parent_pos, gc['control'], optimal_dt)
                
                return {
                    'success': True,
                    'min_distance': result.fun,
                    'optimal_dt': optimal_dt,
                    'final_position': final_pos,
                    'method_used': 'minimize_scalar_bounded',
                    'constraints': {
                        'direction': direction,
                        'bounds': dt_bounds_signed,
                        'adaptive_bounds': dt_bounds
                    },
                    'iterations': getattr(result, 'nit', 0),
                    'function_evaluations': getattr(result, 'nfev', 0)
                }
            else:
                if show:
                    print(f"    ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü!")
                return {
                    'success': False,
                    'min_distance': float('inf'),
                    'method_used': 'failed_bounds_check',
                    'error': 'result_out_of_bounds',
                    'constraints': {
                        'direction': direction,
                        'bounds': dt_bounds_signed,
                        'adaptive_bounds': dt_bounds
                    }
                }
        else:
            return {
                'success': False,
                'min_distance': float('inf'),
                'method_used': 'minimize_scalar_failed',
                'error': getattr(result, 'message', 'optimization_failed'),
                'constraints': {
                    'direction': direction,
                    'bounds': dt_bounds_signed,
                    'adaptive_bounds': dt_bounds
                }
            }
            
    except Exception as e:
        if show:
            print(f"    –û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        return {
            'success': False,
            'min_distance': float('inf'),
            'method_used': 'failed',
            'error': str(e),
            'constraints': {
                'direction': direction,
                'bounds': dt_bounds_signed,
                'adaptive_bounds': dt_bounds
            }
        }

