import numpy as np
from typing import List, Dict, Any, Optional

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–æ–º –∂–µ –ø–∞–∫–µ—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É—Ç—å)
from spore_tree_config import SporeTreeConfig

class SporeTree:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤–æ–º —Å–ø–æ—Ä –º–∞—è—Ç–Ω–∏–∫–∞.
    """
    
    def __init__(self, pendulum, config: SporeTreeConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Å–ø–æ—Ä.
        
        Args:
            pendulum: –æ–±—ä–µ–∫—Ç –º–∞—è—Ç–Ω–∏–∫–∞ (PendulumSystem)
            config: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SporeTreeConfig
        """
        self.pendulum = pendulum
        self.config = config
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
        self.config.validate()
        
        # –ö–æ—Ä–Ω–µ–≤–∞—è —Å–ø–æ—Ä–∞
        self.root = {
            'position': self.config.initial_position.copy(),
            'id': 'root',
            'color': 'red',
            'size': self.config.root_size
        }
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤
        self.children = []
        self.grandchildren = []
        self.sorted_grandchildren = []
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._children_created = False
        self._grandchildren_created = False
        self._grandchildren_sorted = False
        
        if self.config.show_debug:
            print(f"üå± SporeTree —Å–æ–∑–¥–∞–Ω —Å –ø–æ–∑–∏—Ü–∏–µ–π {self.config.initial_position}")
    
    def create_children(self, dt_children: Optional[np.ndarray] = None, show: bool = None) -> List[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç 4 –¥–µ—Ç–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏.
        
        Args:
            dt_children: –º–∞—Å—Å–∏–≤ –∏–∑ 4 –∑–Ω–∞—á–µ–Ω–∏–π dt –¥–ª—è –¥–µ—Ç–µ–π.
                        –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.dt_base –¥–ª—è –≤—Å–µ—Ö.
            show: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.show_debug
        
        Returns:
            List –¥–µ—Ç–µ–π
        """
        if show is None:
            show = self.config.show_debug
            
        if self._children_created:
            if show:
                print("‚ö†Ô∏è –î–µ—Ç–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        u_min, u_max = self.pendulum.get_control_bounds()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º dt –¥–ª—è –¥–µ—Ç–µ–π
        if dt_children is None:
            dt_children = np.ones(4) * self.config.dt_base
        else:
            assert len(dt_children) == 4, "dt_children –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 4 —ç–ª–µ–º–µ–Ω—Ç–∞"
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: [forw_max, back_max, forw_min, back_min]
        controls = [u_max, u_max, u_min, u_min]
        dt_signs = [1, -1, 1, -1]  # forw: +dt, back: -dt
        colors = ['#FF6B6B', '#9B59B6', '#1ABC9C', '#F39C12']  # –ö–æ—Ä–∞–ª–ª–æ–≤—ã–π, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π, –±–∏—Ä—é–∑–æ–≤—ã–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        names = ['forw_max', 'back_max', 'forw_min', 'back_min']
        
        self.children = []
        
        for i in range(4):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º dt —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞–∫–æ–º
            signed_dt = dt_children[i] * dt_signs[i]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ scipy_rk45_step
            new_position = self.pendulum.scipy_rk45_step(
                state=self.root['position'],
                control=controls[i],
                dt=signed_dt
            )
            
            child = {
                'position': new_position,
                'id': f'child_{i}',
                'name': f'{names[i]}',
                'parent_idx': None,  # –∫–æ—Ä–µ–Ω—å –Ω–µ –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å–∞
                'control': controls[i],
                'dt': signed_dt,  # —Ö—Ä–∞–Ω–∏–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π dt (+ –¥–ª—è forw, - –¥–ª—è back)
                'color': colors[i],  # –£–ù–ò–ö–ê–õ–¨–ù–´–ô —Ü–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
                'size': self.config.child_size,
                'child_idx': i
            }
            
            self.children.append(child)
        
        self._children_created = True
        
        if show:
            print(f"üë∂ –°–æ–∑–¥–∞–Ω–æ {len(self.children)} –¥–µ—Ç–µ–π:")
            for i, child in enumerate(self.children):
                print(f"  {i}: {child['name']} —Å dt={child['dt']:.4f}, —Ü–≤–µ—Ç={child['color']}")
        
        return self.children
    
    def create_grandchildren(self, dt_grandchildren: Optional[np.ndarray] = None, show: bool = None) -> List[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–Ω—É–∫–æ–≤ (–ø–æ 2 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ = 8 –≤—Å–µ–≥–æ).
        
        Args:
            dt_grandchildren: –º–∞—Å—Å–∏–≤ –∏–∑ 8 –∑–Ω–∞—á–µ–Ω–∏–π dt –¥–ª—è –≤–Ω—É–∫–æ–≤.
                            –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç parent_dt * config.dt_grandchildren_factor
            show: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.show_debug
        
        Returns:
            List –≤–Ω—É–∫–æ–≤
        """
        if show is None:
            show = self.config.show_debug
            
        if not self._children_created:
            raise RuntimeError("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–µ–π —á–µ—Ä–µ–∑ create_children()")
            
        if self._grandchildren_created:
            if show:
                print("‚ö†Ô∏è –í–Ω—É–∫–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        u_min, u_max = self.pendulum.get_control_bounds()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º dt –¥–ª—è –≤–Ω—É–∫–æ–≤
        if dt_grandchildren is None:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: dt_–≤–Ω—É–∫–∞ = dt_—Ä–æ–¥–∏—Ç–µ–ª—è * factor
            dt_grandchildren = []
            for child in self.children:
                parent_dt = child['dt']
                grandchild_dt = parent_dt * self.config.dt_grandchildren_factor  # –ó–Ω–∞–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è!
                dt_grandchildren.extend([grandchild_dt, grandchild_dt])  # –ø–æ 2 –Ω–∞ —Ä–µ–±–µ–Ω–∫–∞
            dt_grandchildren = np.array(dt_grandchildren)
        else:
            assert len(dt_grandchildren) == 8, "dt_grandchildren –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
        
        self.grandchildren = []
        grandchild_global_idx = 0
        
        for parent_idx, parent in enumerate(self.children):
            # –°–æ–∑–¥–∞–µ–º 2 –≤–Ω—É–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
            controls = [u_max, u_min]
            control_names = ['max', 'min']
            
            for local_idx in range(2):
                # dt –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–Ω—É–∫–∞
                grandchild_dt = dt_grandchildren[grandchild_global_idx]
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–Ω—É–∫–∞ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
                new_position = self.pendulum.scipy_rk45_step(
                    state=parent['position'],
                    control=controls[local_idx], 
                    dt=grandchild_dt
                )
                
                grandchild = {
                    'position': new_position,
                    'id': f'grandchild_{parent_idx}_{local_idx}',
                    'name': f'gc_{parent_idx}_{local_idx}_{control_names[local_idx]}',
                    'parent_idx': parent_idx,  # –∏–Ω–¥–µ–∫—Å —Ä–æ–¥–∏—Ç–µ–ª—è (0-3)
                    'local_idx': local_idx,    # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É —Ä–æ–¥–∏—Ç–µ–ª—è (0-1)
                    'global_idx': grandchild_global_idx,  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (0-7)
                    'control': controls[local_idx],
                    'dt': grandchild_dt,
                    'color': parent['color'],  # –Ω–∞—Å–ª–µ–¥—É–µ–º —Ü–≤–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
                    'size': self.config.grandchild_size
                }
                
                self.grandchildren.append(grandchild)
                grandchild_global_idx += 1
        
        self._grandchildren_created = True
        
        if show:
            print(f"üë∂ –°–æ–∑–¥–∞–Ω–æ {len(self.grandchildren)} –≤–Ω—É–∫–æ–≤:")
            for gc in self.grandchildren:
                print(f"  {gc['global_idx']}: {gc['name']} –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è {gc['parent_idx']}, dt={gc['dt']:.6f}")
        
        return self.grandchildren
    
    def get_default_dt_vector(self) -> np.ndarray:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
        
        Returns:
            np.array –∏–∑ 12 —ç–ª–µ–º–µ–Ω—Ç–æ–≤: [4 dt –¥–ª—è –¥–µ—Ç–µ–π] + [8 dt –¥–ª—è –≤–Ω—É–∫–æ–≤]
        """
        return self.config.get_default_dt_vector()
    
    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
        self.children = []
        self.grandchildren = []
        self.sorted_grandchildren = []
        self._children_created = False
        self._grandchildren_created = False
        self._grandchildren_sorted = False
        
        if self.config.show_debug:
            print("üîÑ –î–µ—Ä–µ–≤–æ —Å–±—Ä–æ—à–µ–Ω–æ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")