def extract_pairs_from_chronology(chronology, show=False):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä—ã –≤–Ω—É–∫–æ–≤ –ø–æ —É–º–Ω–æ–π –ª–æ–≥–∏–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π.
    
    –õ–æ–≥–∏–∫–∞:
    1. –ò–¥–µ–º –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –≤—Å—Ç—Ä–µ—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–Ω—É–∫–∞
    2. –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º –≤–Ω—É–∫–∞ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º < 1e-6, –±–µ—Ä–µ–º –µ–≥–æ –≤ –ø–∞—Ä—É –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    3. –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º < 1e-6, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –∏ –±–µ—Ä–µ–º –ª—É—á—à–µ–≥–æ –≤–Ω—É–∫–∞ –∏–∑ —Ç–µ—Ö, —á—Ç–æ –≤–∏–¥–µ–ª–∏ –î–û —Ä–æ–¥–∏—Ç–µ–ª—è
    4. –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ - –±–µ—Ä–µ–º –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤–Ω—É–∫–∞
    
    Args:
        chronology: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç create_chronological_meetings()
        show: bool - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä
        
    Returns:
        list: —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤–∏–¥–∞ [(gc_i, gc_j, meeting_info), ...]
    """
    if show:
        print("–§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ü–ê–† –ü–û –£–ú–ù–û–ô –õ–û–ì–ò–ö–ï (–†–ê–°–°–¢–û–Ø–ù–ò–Ø < 1e-6 + –õ–£–ß–®–ò–ô –í–ù–£–ö)")
        print("=" * 70)
    
    pairs = []
    used_grandchildren = set()  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É–∫–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    sorted_gc_indices = sorted(chronology.keys())
    
    for gc_idx in sorted_gc_indices:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤–Ω—É–∫–æ–≤
        if gc_idx in used_grandchildren:
            if show:
                print(f"gc_{gc_idx}: —É–∂–µ –≤ –ø–∞—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        meetings = chronology[gc_idx]
        
        if show:
            print(f"\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º gc_{gc_idx}:")
            print(f"  –í—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏: {len(meetings)}")
            print(f"  (–≤—Å—Ç—Ä–µ—á–∏ —Ç–æ–ª—å–∫–æ —Å –ß–£–ñ–ò–ú–ò —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ - —Å–≤–æ–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö)")
        
        # –ò–¥–µ–º –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é –ª–æ–≥–∏–∫—É
        selected_meeting = None
        best_grandchild_meeting = None  # –õ—É—á—à–∏–π –≤–Ω—É–∫, –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–π –¥–æ —Å–∏—Ö –ø–æ—Ä
        stop_reason = None
        
        for i, meeting in enumerate(meetings):
            distance = meeting['distance']
            
            if show:
                print(f"    {i+1}. {meeting['partner']}: —Ä–∞—Å—Å—Ç={distance}, —Ç–∏–ø={meeting['type']}")
            
            if meeting['type'] == 'grandchild':
                partner_idx = meeting['partner_idx']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                if partner_idx not in used_grandchildren:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–≥–æ –≤–Ω—É–∫–∞
                    if best_grandchild_meeting is None or distance < best_grandchild_meeting['distance']:
                        best_grandchild_meeting = meeting
                        if show:
                            print(f"      üìù –û–±–Ω–æ–≤–∏–ª–∏ –ª—É—á—à–µ–≥–æ –≤–Ω—É–∫–∞: {meeting['partner']} (—Ä–∞—Å—Å—Ç={distance})")
                    
                    # –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ < 1e-6, —Å—Ä–∞–∑—É –±–µ—Ä–µ–º
                    if distance < 1e-6:
                        selected_meeting = meeting
                        stop_reason = f"–Ω–∞—à–ª–∏ –≤–Ω—É–∫–∞ {meeting['partner']} —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º {distance} < 1e-6"
                        if show:
                            print(f"      ‚úÖ –í–´–ë–†–ê–ù –°–†–ê–ó–£: {stop_reason}")
                        break
                    else:
                        if show:
                            print(f"      ‚è© –í–Ω—É–∫ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {distance} >= 1e-6, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫")
                else:
                    if show:
                        print(f"      ‚ùå –í–Ω—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)")
                        
            elif meeting['type'] == 'parent':
                # –í—Å–µ —Ä–æ–¥–∏—Ç–µ–ª–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ —É–∂–µ –ß–£–ñ–ò–ï (—Å–≤–æ–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö)
                if distance < 1e-6:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –∏ –±–µ—Ä–µ–º –ª—É—á—à–µ–≥–æ –≤–Ω—É–∫–∞ –∏–∑ —Ç–µ—Ö, —á—Ç–æ –≤–∏–¥–µ–ª–∏
                    stop_reason = f"–≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —á—É–∂–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è {meeting['partner']} —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º {distance} < 1e-6"
                    if best_grandchild_meeting is not None:
                        selected_meeting = best_grandchild_meeting
                        stop_reason += f", –±–µ—Ä–µ–º –ª—É—á—à–µ–≥–æ –≤–Ω—É–∫–∞ {best_grandchild_meeting['partner']}"
                    if show:
                        print(f"      üõë –°–¢–û–ü: {stop_reason}")
                    break
                else:
                    if show:
                        print(f"      ‚è© –ß—É–∂–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å {meeting['partner']}, –Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {distance} >= 1e-6, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫")
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏, –±–µ—Ä–µ–º –ª—É—á—à–µ–≥–æ –≤–Ω—É–∫–∞
        if selected_meeting is None and best_grandchild_meeting is not None:
            selected_meeting = best_grandchild_meeting
            stop_reason = f"–¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏, –±–µ—Ä–µ–º –ª—É—á—à–µ–≥–æ –≤–Ω—É–∫–∞ {best_grandchild_meeting['partner']}"
            if show:
                print(f"      üèÅ –ö–û–ù–ï–¶ –•–†–û–ù–û–õ–û–ì–ò–ò: {stop_reason}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if selected_meeting:
            partner_idx = selected_meeting['partner_idx']
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É
            pair = (gc_idx, partner_idx, selected_meeting)
            pairs.append(pair)
            
            # –ü–æ–º–µ—á–∞–µ–º –æ–±–æ–∏—Ö –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
            used_grandchildren.add(gc_idx)
            used_grandchildren.add(partner_idx)
            
            if show:
                meeting_time = selected_meeting['meeting_time']
                distance = selected_meeting['distance']
                print(f"  üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: gc_{gc_idx} + gc_{partner_idx}, t={meeting_time}—Å, —Ä–∞—Å—Å—Ç={distance}")
        else:
            if show:
                if meetings:
                    print(f"  ‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: gc_{gc_idx} –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–Ω—É–∫–æ–≤")
                else:
                    print(f"  ‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: gc_{gc_idx} –≤–æ–æ–±—â–µ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á")
    
    if show:
        unpaired_count = len(chronology) - len(used_grandchildren)
        print(f"\n–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 30)
        print(f"  –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: {len(pairs)}")
        print(f"  –í–Ω—É–∫–æ–≤ –≤ –ø–∞—Ä–∞—Ö: {len(used_grandchildren)}")
        print(f"  –í–Ω—É–∫–æ–≤ –±–µ–∑ –ø–∞—Ä: {unpaired_count}")
        
        print(f"\n–°–ü–ò–°–û–ö –ü–ê–†:")
        for i, (gc_i, gc_j, meeting) in enumerate(pairs, 1):
            print(f"  {i}. gc_{gc_i} ‚Üî gc_{gc_j}: t={meeting['meeting_time']}—Å, —Ä–∞—Å—Å—Ç={meeting['distance']}")
    
    return pairs


def analyze_pairing_quality(pairs, chronology, show=False):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä.
    
    Args:
        pairs: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç extract_pairs_from_chronology()
        chronology: –∏—Å—Ö–æ–¥–Ω–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è
        show: bool - –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑
        
    Returns:
        dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä
    """
    if not pairs:
        return {'total_pairs': 0, 'avg_distance': 0, 'avg_time': 0}
    
    distances = []
    times = []
    
    for gc_i, gc_j, meeting in pairs:
        distances.append(meeting['distance'])
        times.append(meeting['meeting_time'])
    
    stats = {
        'total_pairs': len(pairs),
        'avg_distance': sum(distances) / len(distances),
        'min_distance': min(distances),
        'max_distance': max(distances),
        'avg_time': sum(times) / len(times),
        'min_time': min(times),
        'max_time': max(times),
        'ultra_close_pairs': sum(1 for d in distances if d < 1e-6),  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ < 1e-6
        'very_close_pairs': sum(1 for d in distances if d < 1e-5),   # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ < 1e-5
        'close_pairs': sum(1 for d in distances if d < 1e-4)         # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ < 1e-4
    }
    
    if show:
        print("–ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ü–ê–†:")
        print("=" * 30)
        print(f"–í—Å–µ–≥–æ –ø–∞—Ä: {stats['total_pairs']}")
        print(f"\n–†–∞—Å—Å—Ç–æ—è–Ω–∏—è:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {stats['avg_distance']}")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {stats['min_distance']}")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {stats['max_distance']}")
        print(f"\n–í—Ä–µ–º–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {stats['avg_time']}—Å")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {stats['min_time']}—Å")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {stats['max_time']}—Å")
        print(f"\n–ö–∞—á–µ—Å—Ç–≤–æ —Å–±–ª–∏–∂–µ–Ω–∏—è:")
        print(f"  –£–ª—å—Ç—Ä–∞-–±–ª–∏–∑–∫–∏–µ (< 1e-6): {stats['ultra_close_pairs']}/{stats['total_pairs']}")
        print(f"  –û—á–µ–Ω—å –±–ª–∏–∑–∫–∏–µ (< 1e-5): {stats['very_close_pairs']}/{stats['total_pairs']}")
        print(f"  –ë–ª–∏–∑–∫–∏–µ (< 1e-4): {stats['close_pairs']}/{stats['total_pairs']}")
    
    return stats

def get_pair_details(pairs, tree, show=False):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞—Ö.
    
    Args:
        pairs: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç extract_pairs_from_chronology()
        tree: SporeTree –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–Ω—É–∫–∞—Ö
        show: bool - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
    Returns:
        list: —Å–ø–∏—Å–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–∞—Ö
    """
    detailed_pairs = []
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
    min_parent_distance = _calculate_min_parent_distance(tree, show=False)
    distance_threshold = min_parent_distance / 10.0
    
    for i, (gc_i, gc_j, meeting_info) in enumerate(pairs):
        gc_i_info = tree.grandchildren[gc_i]
        gc_j_info = tree.grandchildren[gc_j]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        direction_i = "forward" if gc_i_info['dt'] > 0 else "backward"
        direction_j = "forward" if gc_j_info['dt'] > 0 else "backward"
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ
        pair_detail = {
            'pair_index': i,
            'gc_i': gc_i,
            'gc_j': gc_j,
            'gc_i_direction': direction_i,
            'gc_j_direction': direction_j,
            'gc_i_parent': gc_i_info['parent_idx'],
            'gc_j_parent': gc_j_info['parent_idx'],
            'meeting_time': meeting_info['meeting_time'],
            'distance': meeting_info['distance'],
            'time_gc_i': meeting_info['time_gc'],
            'time_gc_j': meeting_info['time_partner'],
            'who_waits': meeting_info['who_waits'],
            'same_parent': gc_i_info['parent_idx'] == gc_j_info['parent_idx'],
            'distance_ratio': meeting_info['distance'] / min_parent_distance,  # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –º–∏–Ω. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            'passes_distance_check': meeting_info['distance'] < distance_threshold
        }
        detailed_pairs.append(pair_detail)
    
    if show:
        print("–ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–†–ê–•:")
        print("=" * 70)
        print(f"–ü–æ—Ä–æ–≥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {distance_threshold:.5f} (1/10 –æ—Ç –º–∏–Ω. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π)")
        
        for detail in detailed_pairs:
            print(f"\n–ü–∞—Ä–∞ {detail['pair_index']}: gc_{detail['gc_i']} ‚Üî gc_{detail['gc_j']}")
            print(f"  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {detail['gc_i_direction']} ‚Üî {detail['gc_j_direction']}")
            print(f"  –†–æ–¥–∏—Ç–µ–ª–∏: parent_{detail['gc_i_parent']} ‚Üî parent_{detail['gc_j_parent']}")
            print(f"  –û–¥–∏–Ω —Ä–æ–¥–∏—Ç–µ–ª—å: {'–î–ê' if detail['same_parent'] else '–ù–ï–¢'}")
            print(f"  –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: {detail['meeting_time']:.4f}—Å")
            print(f"  –í—Ä–µ–º–µ–Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π: gc_{detail['gc_i']}={detail['time_gc_i']:+.4f}—Å, "
                  f"gc_{detail['gc_j']}={detail['time_gc_j']:+.4f}—Å")
            print(f"  –ö—Ç–æ –∂–¥–µ—Ç: {detail['who_waits']}")
            print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {detail['distance']:.5f} (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {detail['distance_ratio']:.2f})")
            print(f"  –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É: {'–î–ê' if detail['passes_distance_check'] else '–ù–ï–¢'}")
    
    return detailed_pairs


def analyze_pair_statistics(detailed_pairs, show=False):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä.
    
    Args:
        detailed_pairs: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç get_pair_details()
        show: bool - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
    Returns:
        dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä
    """
    if not detailed_pairs:
        return {'total_pairs': 0}
    
    stats = {
        'total_pairs': len(detailed_pairs),
        'same_parent_pairs': 0,
        'different_parent_pairs': 0,
        'forward_forward_pairs': 0,
        'backward_backward_pairs': 0,
        'forward_backward_pairs': 0,
        'avg_meeting_time': 0,
        'min_meeting_time': float('inf'),
        'max_meeting_time': 0,
        'avg_distance': 0,
        'min_distance': float('inf'),
        'max_distance': 0
    }
    
    meeting_times = []
    distances = []
    
    for detail in detailed_pairs:
        # –†–æ–¥–∏—Ç–µ–ª–∏
        if detail['same_parent']:
            stats['same_parent_pairs'] += 1
        else:
            stats['different_parent_pairs'] += 1
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        if detail['gc_i_direction'] == 'forward' and detail['gc_j_direction'] == 'forward':
            stats['forward_forward_pairs'] += 1
        elif detail['gc_i_direction'] == 'backward' and detail['gc_j_direction'] == 'backward':
            stats['backward_backward_pairs'] += 1
        else:
            stats['forward_backward_pairs'] += 1
        
        # –í—Ä–µ–º–µ–Ω–∞ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        meeting_times.append(detail['meeting_time'])
        distances.append(detail['distance'])
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if meeting_times:
        stats['avg_meeting_time'] = sum(meeting_times) / len(meeting_times)
        stats['min_meeting_time'] = min(meeting_times)
        stats['max_meeting_time'] = max(meeting_times)
    
    if distances:
        stats['avg_distance'] = sum(distances) / len(distances)
        stats['min_distance'] = min(distances)
        stats['max_distance'] = max(distances)
    
    if show:
        print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†:")
        print("=" * 30)
        print(f"–í—Å–µ–≥–æ –ø–∞—Ä: {stats['total_pairs']}")
        print(f"\n–ü–æ —Ä–æ–¥–∏—Ç–µ–ª—è–º:")
        print(f"  –û–¥–∏–Ω —Ä–æ–¥–∏—Ç–µ–ª—å: {stats['same_parent_pairs']}")
        print(f"  –†–∞–∑–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–∏: {stats['different_parent_pairs']}")
        print(f"\n–ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –≤—Ä–µ–º–µ–Ω–∏:")
        print(f"  Forward + Forward: {stats['forward_forward_pairs']}")
        print(f"  Backward + Backward: {stats['backward_backward_pairs']}")
        print(f"  Forward + Backward: {stats['forward_backward_pairs']}")
        print(f"\n–í—Ä–µ–º–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {stats['avg_meeting_time']:.4f}—Å")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {stats['min_meeting_time']:.4f}—Å")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {stats['max_meeting_time']:.4f}—Å")
        print(f"\n–†–∞—Å—Å—Ç–æ—è–Ω–∏—è:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {stats['avg_distance']:.5f}")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {stats['min_distance']:.5f}")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {stats['max_distance']:.5f}")
    
    return stats


def export_pairs_to_csv(detailed_pairs, filename="pairs.csv", show=False):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞—Ö –≤ CSV —Ñ–∞–π–ª.
    
    Args:
        detailed_pairs: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç get_pair_details()
        filename: –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        show: bool - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        
    Returns:
        pandas.DataFrame: —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä
    """
    import pandas as pd
    
    df = pd.DataFrame(detailed_pairs)
    df.to_csv(filename, index=False)
    
    if show:
        print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
        print(f"–°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(df)}")
    
    return df