"""
–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞ —Å —Ç–æ–ø–æ–ª–æ–≥–∏–µ–π –¥–µ—Ä–µ–≤–∞ —Å–ø–æ—Ä.
–†–∞–∑–¥–µ–ª—è–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π.
"""
import numpy as np
from pendulum import OptimizationPendulum


def create_tree_topology(initial_position, pendulum, config):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–æ–ø–æ–ª–æ–≥–∏—é –¥–µ—Ä–µ–≤–∞ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞.
    
    Args:
        initial_position: np.array([theta, theta_dot])
        pendulum: OptimizationPendulum
        config: dict - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    
    Returns:
        dict - —Ç–æ–ø–æ–ª–æ–≥–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
    """
    show = config["debug"]["show_topology_creation"]
    
    if show:
        print(f"üå± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ –¥–µ—Ä–µ–≤–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ {initial_position}")
    
    u_min, u_max = pendulum.get_control_bounds()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º 4 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ—Ç–µ–π (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    child_configs = [
        {'control': u_max, 'dt_sign': 1, 'name': 'forward_max', 'color': 'blue'},
        {'control': u_max, 'dt_sign': -1, 'name': 'backward_max', 'color': 'cyan'}, 
        {'control': u_min, 'dt_sign': 1, 'name': 'forward_min', 'color': 'green'},
        {'control': u_min, 'dt_sign': -1, 'name': 'backward_min', 'color': 'orange'}
    ]
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤–Ω—É–∫–æ–≤ (–æ–±—Ä–∞—â–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
    grandchild_configs = []
    for parent_idx in range(4):
        parent_config = child_configs[parent_idx]
        reversed_control = -parent_config['control']
        
        # 2 –≤–Ω—É–∫–∞ –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è: +dt –∏ -dt
        for local_idx in range(2):
            dt_sign = 1 if local_idx == 0 else -1
            name = f"gc_{parent_idx}_{['forward', 'backward'][local_idx]}"
            
            grandchild_configs.append({
                'parent_idx': parent_idx,
                'local_idx': local_idx,
                'control': reversed_control,
                'dt_sign': dt_sign,
                'name': name,
                'color': 'lightblue' if local_idx == 0 else 'lightcoral'
            })
    
    if show:
        print(f"üìä –°–æ–∑–¥–∞–Ω–∞ —Ç–æ–ø–æ–ª–æ–≥–∏—è:")
        print(f"  üçÑ –î–µ—Ç–µ–π: {len(child_configs)}")
        print(f"  üë∂ –í–Ω—É–∫–æ–≤: {len(grandchild_configs)}")
    
    topology = {
        'initial_position': initial_position.copy(),
        'child_configs': child_configs,
        'grandchild_configs': grandchild_configs,
        'u_min': u_min,
        'u_max': u_max,
        'config_snapshot': config.copy()
    }
    
    if show:
        print("‚úÖ –¢–æ–ø–æ–ª–æ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    return topology





def calculate_grandchildren_positions(topology, dt_vector, pendulum, config):
    """
    –ë—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ 8 –≤–Ω—É–∫–æ–≤ —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π.
    
    Args:
        topology: —Ç–æ–ø–æ–ª–æ–≥–∏—è –æ—Ç create_tree_topology()
        dt_vector: np.array(12) - [4 dt –¥–µ—Ç–µ–π + 8 dt –≤–Ω—É–∫–æ–≤]
        pendulum: OptimizationPendulum  
        config: dict –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    
    Returns:
        np.array((8, 2)) - –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö 8 –≤–Ω—É–∫–æ–≤ –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–Ø–î–ö–ï
    """
    show = config["debug"]["show_calculations"]
    
    if show:
        print(f"üå± –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –≤–Ω—É–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π")
    
    dt_children = dt_vector[0:4]
    dt_grandchildren = dt_vector[4:12]
    initial_pos = topology['initial_position']
    
    # –®–∞–≥ 1: –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ 4 –¥–µ—Ç–µ–π
    children_with_positions = []
    for i, child_config in enumerate(topology['child_configs']):
        control = child_config['control']
        dt_signed = dt_children[i] * child_config['dt_sign']
        
        child_pos = pendulum.step(initial_pos, control, dt_signed)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        child = {
            'position': child_pos,
            'id': f"child_{i}",
            'name': child_config['name'],
            'color': child_config['color'],
            'control': control,
            'dt': dt_signed,
            'dt_abs': abs(dt_signed)
        }
        children_with_positions.append(child)
        
        if show:
            print(f"  üçÑ –†–µ–±–µ–Ω–æ–∫ {i}: {child_config['name']}, u={control:+.1f}, dt={dt_signed:+.3f} ‚Üí {child_pos}")
    
    # –®–∞–≥ 2: –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–π –ø–æ —É–≥–ª—É (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    def get_angle_child(child):
        dx = child['position'][0] - initial_pos[0] 
        dy = child['position'][1] - initial_pos[1]
        return np.arctan2(dy, dx)
    
    children_sorted = sorted(children_with_positions, key=get_angle_child)
    
    # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º ID –ø–æ –ø–æ—Ä—è–¥–∫—É
    for i, child in enumerate(children_sorted):
        child['id'] = f"child_{i}"
    
    if show:
        print("\nüîÑ –î–µ—Ç–∏ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–≥–ª—É:")
        for i, child in enumerate(children_sorted):
            angle = get_angle_child(child) * 180 / np.pi
            print(f"  {i}: {child['name']} –ø–æ–¥ —É–≥–ª–æ–º {angle:.1f}¬∞")
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –≤–Ω—É–∫–æ–≤
    grandchildren_list = []
    gc_idx = 0
    
    for parent_idx, parent in enumerate(children_sorted):
        reversed_control = -parent['control']
        
        if show:
            print(f"\nüë∂ –û—Ç —Ä–æ–¥–∏—Ç–µ–ª—è {parent_idx} ({parent['name']}):")
        
        # 2 –≤–Ω—É–∫–∞ –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        for local_idx in range(2):
            dt_sign = 1 if local_idx == 0 else -1
            dt_signed = dt_grandchildren[gc_idx] * dt_sign
            
            grandchild_pos = pendulum.step(parent['position'], reversed_control, dt_signed)
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            grandchild = {
                'position': grandchild_pos,
                'parent_idx': parent_idx,
                'local_idx': local_idx,
                'global_idx': gc_idx,
                'name': f"gc_{parent_idx}_{['forward', 'backward'][local_idx]}",
                'control': reversed_control,
                'dt': dt_signed
            }
            grandchildren_list.append(grandchild)
            
            if show:
                direction = "forward" if dt_sign > 0 else "backward"
                print(f"    üå± {local_idx}: u={reversed_control:+.1f}, dt={dt_signed:+.4f} ({direction}) ‚Üí {grandchild_pos}")
            
            gc_idx += 1
    
    # –®–∞–≥ 4: –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É–∫–æ–≤ –ø–æ —É–≥–ª—É –æ—Ç –∫–æ—Ä–Ω—è
    def get_angle_from_root(gc):
        dx = gc['position'][0] - initial_pos[0]
        dy = gc['position'][1] - initial_pos[1] 
        return np.arctan2(dy, dx)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≥–ª—É (–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏)
    sorted_gc = sorted(grandchildren_list, key=get_angle_from_root, reverse=True)
    
    if show:
        print("\nüîç –í–Ω—É–∫–∏ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–≥–ª—É:")
        for i, gc in enumerate(sorted_gc):
            angle_deg = get_angle_from_root(gc) * 180 / np.pi
            print(f"  {i}: {gc['name']} (—Ä–æ–¥–∏—Ç–µ–ª—å {gc['parent_idx']}) –ø–æ–¥ —É–≥–ª–æ–º {angle_deg:.1f}¬∞")
    
    # –®–∞–≥ 5: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ì–û–†–ò–¢–ú - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –ø–∞—Ä—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –≤–Ω—É–∫–∞
    if len(sorted_gc) >= 2:
        first_parent = sorted_gc[0]['parent_idx']
        second_parent = sorted_gc[1]['parent_idx']
        
        if show:
            print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã:")
            print(f"  –í–Ω—É–∫ 0: —Ä–æ–¥–∏—Ç–µ–ª—å {first_parent}")
            print(f"  –í–Ω—É–∫ 1: —Ä–æ–¥–∏—Ç–µ–ª—å {second_parent}")
        
        if first_parent == second_parent:
            # –í–Ω—É–∫–∏ 0 –∏ 1 –æ—Ç –æ–¥–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è - –¥–µ–ª–∞–µ–º roll –Ω–∞ 1
            sorted_gc = np.roll(sorted_gc, 1).tolist()
            if show:
                print("üîÑ –ü–†–ò–ú–ï–ù–ï–ù ROLL +1 - –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –≤–Ω—É–∫–∞ –±—ã–ª–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è")
                print(f"  –ù–æ–≤–∞—è –ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞: –≤–Ω—É–∫ 0 (—Ä–æ–¥–∏—Ç–µ–ª—å {sorted_gc[0]['parent_idx']}) –∏ –≤–Ω—É–∫ 1 (—Ä–æ–¥–∏—Ç–µ–ª—å {sorted_gc[1]['parent_idx']})")
        else:
            if show:
                print("‚úÖ –ü–µ—Ä–≤—ã–µ –¥–≤–∞ –≤–Ω—É–∫–∞ —É–∂–µ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π - roll –Ω–µ –Ω—É–∂–µ–Ω")
    
    # –®–∞–≥ 6: –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    sorted_positions = np.array([gc['position'] for gc in sorted_gc])
    
    if show:
        print(f"\n‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö –í–ù–£–ö–û–í:")
        for i, gc in enumerate(sorted_gc):
            print(f"  {i}: {gc['name']} –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è {gc['parent_idx']}")
        
        print(f"\nüìã –ü–†–û–í–ï–†–ö–ê –ü–ê–†:")
        for pair_idx in range(4):
            idx1, idx2 = pair_idx * 2, pair_idx * 2 + 1
            parent1 = sorted_gc[idx1]['parent_idx']
            parent2 = sorted_gc[idx2]['parent_idx']
            different = parent1 != parent2
            print(f"  –ü–∞—Ä–∞ {pair_idx} (–≤–Ω—É–∫–∏ {idx1}-{idx2}): —Ä–æ–¥–∏—Ç–µ–ª–∏ {parent1}-{parent2} {'‚úÖ' if different else '‚ùå'}")
    
    return sorted_positions


def calculate_metrics(grandchild_positions, config):
    """
    –ë—ã—Å—Ç—Ä–æ –≤—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –∏ –ø–ª–æ—â–∞–¥—å.
    
    Args:
        grandchild_positions: np.array((8, 2)) - –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É–∫–æ–≤
        config: dict - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    
    Returns:
        dict —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏, —Å—Ä–µ–¥–Ω–∏–º–∏ —Ç–æ—á–∫–∞–º–∏ –∏ –ø–ª–æ—â–∞–¥—å—é
    """
    show = config["debug"]["show_calculations"]
    
    if show:
        print("üîç –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏:")
    
    # –ü–∞—Ä—ã –≤–Ω—É–∫–æ–≤: (0,1), (2,3), (4,5), (6,7)
    pair_distances = np.zeros(4)
    mean_points = np.zeros((4, 2))
    
    for pair_idx in range(4):
        idx1 = pair_idx * 2
        idx2 = pair_idx * 2 + 1
        
        pos1 = grandchild_positions[idx1]
        pos2 = grandchild_positions[idx2]
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–∞—Ä–æ–π
        distance = np.linalg.norm(pos1 - pos2)
        pair_distances[pair_idx] = distance
        
        # –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ –ø–∞—Ä—ã
        mean_points[pair_idx] = (pos1 + pos2) / 2
        
        if show:
            print(f"  üìè –ü–∞—Ä–∞ {pair_idx}: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = {distance:.6f}, —Å—Ä–µ–¥–Ω—è—è = {mean_points[pair_idx]}")
    
    # –ü–ª–æ—â–∞–¥—å —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∞ (—Ñ–æ—Ä–º—É–ª–∞ –®–Ω—É—Ä–∞)
    x = mean_points[:, 0]
    y = mean_points[:, 1]
    area = 0.5 * np.abs(np.dot(x, np.roll(y, 1)) - np.dot(y, np.roll(x, 1)))
    
    if show:
        print(f"  üìä –ü–ª–æ—â–∞–¥—å —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∞: {area:.6f}")
    
    return {
        'pair_distances': pair_distances,
        'mean_points': mean_points,
        'area': area
    }