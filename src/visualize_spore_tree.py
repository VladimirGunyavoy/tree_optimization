import matplotlib.pyplot as plt
from matplotlib.patches import FancyArrowPatch
import numpy as np

def visualize_spore_tree(tree, title="–î–µ—Ä–µ–≤–æ —Å–ø–æ—Ä"):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ —Å–ø–æ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ —Å—Ç—Ä–µ–ª–æ–∫ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏.
    
    Args:
        tree: –æ–±—ä–µ–∫—Ç SporeTree
        title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
    """
    fig, ax = plt.subplots(1, 1, figsize=tree.config.figure_size)
    
    print("üé® –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è visualize_spore_tree –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    
    # –†–∏—Å—É–µ–º –∫–æ—Ä–Ω–µ–≤—É—é —Å–ø–æ—Ä—É
    ax.scatter(tree.root['position'][0], tree.root['position'][1], 
              c=tree.root['color'], s=tree.root['size'], alpha=0.8, 
              label='Root', edgecolors='black', linewidth=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –∫–æ—Ä–Ω—é
    ax.text(tree.root['position'][0], tree.root['position'][1] + 0.02, 
            'ROOT', fontsize=10, fontweight='bold', 
            ha='center', va='bottom')
    
    # –†–∏—Å—É–µ–º –¥–µ—Ç–µ–π –∏ —Å—Ç—Ä–µ–ª–∫–∏
    if tree._children_created:
        for i, child in enumerate(tree.children):
            # –¢–æ—á–∫–∞ —Ä–µ–±–µ–Ω–∫–∞
            ax.scatter(child['position'][0], child['position'][1],
                      c=child['color'], s=child['size'], alpha=0.8,
                      edgecolors='black', linewidth=1, 
                      label=f"{child['name']} (dt={child['dt']:+.5f})")
            
            # –ù–æ–º–µ—Ä —Ä–µ–±–µ–Ω–∫–∞
            ax.text(child['position'][0], child['position'][1] + 0.01, 
                    str(i), fontsize=9, fontweight='bold', 
                    color='white', ha='center', va='center',
                    bbox=dict(boxstyle="circle,pad=0.1", facecolor='black', alpha=0.8))
            
            # –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï —Å—Ç—Ä–µ–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–Ω–∞–∫–∞ dt
            if child['dt'] > 0:  # forward: –æ—Ç –∫–æ—Ä–Ω—è –∫ —Ä–µ–±–µ–Ω–∫—É
                arrow_start = tree.root['position']
                arrow_end = child['position']
            else:  # backward: –æ—Ç —Ä–µ–±–µ–Ω–∫–∞ –∫ –∫–æ—Ä–Ω—é (–û–ë–†–ê–¢–ù–û–ï!)
                arrow_start = child['position']
                arrow_end = tree.root['position']
            
            # –¶–í–ï–¢ —Å—Ç—Ä–µ–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–Ω–∞–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if child['control'] > 0:  # u_max 
                arrow_color = '#FF6B6B'  # –∫–æ—Ä–∞–ª–ª–æ–≤—ã–π –¥–ª—è u_max
            else:  # u_min
                arrow_color = '#1ABC9C'  # –±–∏—Ä—é–∑–æ–≤—ã–π –¥–ª—è u_min
            
            # –°—Ç—Ä–µ–ª–∫–∞ –ë–ï–ó –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π!
            arrow = FancyArrowPatch(
                arrow_start, arrow_end,
                arrowstyle='->', 
                mutation_scale=20,
                color=arrow_color,  # ‚Üê –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ü–≤–µ—Ç!
                alpha=0.7,
                linewidth=3
            )
            ax.add_patch(arrow)
    
    # –†–∏—Å—É–µ–º –≤–Ω—É–∫–æ–≤ –∏ —Å—Ç—Ä–µ–ª–∫–∏
    if tree._grandchildren_created:
        # –¶–≤–µ—Ç–∞ –¥–ª—è –≤–Ω—É–∫–æ–≤ - —Å–≤–µ—Ç–ª—ã–µ –≤–µ—Ä—Å–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
        grandchild_colors = {
            '#FF6B6B': '#FFB3BA',  # –∫–æ—Ä–∞–ª–ª–æ–≤—ã–π ‚Üí —Å–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π
            '#9B59B6': '#D7BDE2',  # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π ‚Üí —Å–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            '#1ABC9C': '#A3E4D7',  # –±–∏—Ä—é–∑–æ–≤—ã–π ‚Üí —Å–≤–µ—Ç–ª–æ-–±–∏—Ä—é–∑–æ–≤—ã–π  
            '#F39C12': '#F8C471'   # –æ—Ä–∞–Ω–∂–µ–≤—ã–π ‚Üí —Å–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        }
        
        for gc in tree.grandchildren:
            parent = tree.children[gc['parent_idx']]
            gc_color = grandchild_colors.get(parent['color'], 'gray')
            
            # –¢–æ—á–∫–∞ –≤–Ω—É–∫–∞
            ax.scatter(gc['position'][0], gc['position'][1],
                    c=gc_color, s=gc['size'], alpha=0.8,
                    edgecolors='gray', linewidth=1, 
                    label=f"{gc['name']} (dt={gc['dt']:+.5f})")
            
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–Ω—É–∫–∞
            ax.text(gc['position'][0], gc['position'][1] + 0.01, 
                    str(gc['global_idx']), fontsize=7, fontweight='bold', 
                    color='white', ha='center', va='center',
                    bbox=dict(boxstyle="circle,pad=0.5", facecolor='darkgray', alpha=0.9))
            
            # –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï —Å—Ç—Ä–µ–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–Ω–∞–∫–∞ dt –≤–Ω—É–∫–∞
            if gc['dt'] > 0:  # forward: –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –∫ –≤–Ω—É–∫—É
                arrow_start = parent['position']
                arrow_end = gc['position']
            else:  # backward: –æ—Ç –≤–Ω—É–∫–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é (–û–ë–†–ê–¢–ù–û–ï!)
                arrow_start = gc['position']
                arrow_end = parent['position']
            
            # –¶–í–ï–¢ —Å—Ç—Ä–µ–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–Ω–∞–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω—É–∫–∞
            if gc['control'] > 0:  # u_max
                arrow_color = '#FF6B6B'  # –∫–æ—Ä–∞–ª–ª–æ–≤—ã–π –¥–ª—è u_max
            else:  # u_min  
                arrow_color = '#1ABC9C'  # –±–∏—Ä—é–∑–æ–≤—ã–π –¥–ª—è u_min
            
            # –°—Ç—Ä–µ–ª–∫–∞ –ë–ï–ó –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π!
            arrow = FancyArrowPatch(
                arrow_start, arrow_end,
                arrowstyle='->', 
                mutation_scale=15,
                color=arrow_color,  # ‚Üê –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ü–≤–µ—Ç!
                alpha=0.6,
                linewidth=2
            )
            ax.add_patch(arrow)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    ax.set_xlabel('Œ∏ (—Ä–∞–¥–∏–∞–Ω—ã)')
    ax.set_ylabel('Œ∏Ãá (—Ä–∞–¥/—Å)')
    ax.set_title(title)
    ax.grid(True, alpha=0.3)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    all_x = [tree.root['position'][0]]
    all_y = [tree.root['position'][1]]
    
    if tree._children_created:
        all_x.extend([child['position'][0] for child in tree.children])
        all_y.extend([child['position'][1] for child in tree.children])
    
    if tree._grandchildren_created:
        all_x.extend([gc['position'][0] for gc in tree.grandchildren])
        all_y.extend([gc['position'][1] for gc in tree.grandchildren])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
    x_range = max(all_x) - min(all_x)
    y_range = max(all_y) - min(all_y)
    x_margin = max(x_range * 0.1, 0.05)
    y_margin = max(y_range * 0.1, 0.05)
    
    ax.set_xlim(min(all_x) - x_margin, max(all_x) + x_margin)
    ax.set_ylim(min(all_y) - y_margin, max(all_y) + y_margin)
    
    # –õ–µ–≥–µ–Ω–¥–∞ —Å–ø—Ä–∞–≤–∞
    handles, labels = ax.get_legend_handles_labels()
    by_label = dict(zip(labels, handles))
    ax.legend(by_label.values(), by_label.keys(), 
             loc='center left', bbox_to_anchor=(1, 0.5), fontsize=8)
    
    plt.show()